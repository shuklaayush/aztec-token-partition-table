/* Autogenerated file, do not edit! */

use dep::std;
use dep::aztec::context::{PrivateContext, PublicContext};
use dep::aztec::protocol_types::{address::AztecAddress, abis::function_selector::FunctionSelector, constants::RETURN_VALUES_LENGTH};

struct FromTransferStruct {
  inner: Field,
}

struct ToTransferStruct {
  inner: Field,
}

struct FromRequestAttestationStruct {
  inner: Field,
}

struct AttestorRequestAttestationStruct {
  inner: Field,
}

struct NewAdminSetAdminStruct {
  inner: Field,
}

struct ToRedeemShieldStruct {
  inner: Field,
}

struct FromUnshieldStruct {
  inner: Field,
}

struct ToUnshieldStruct {
  inner: Field,
}

struct ToMintPublicStruct {
  inner: Field,
}

struct FromBurnStruct {
  inner: Field,
}

struct FromShieldStruct {
  inner: Field,
}

struct MinterSetMinterStruct {
  inner: Field,
}

struct FromTransferPublicStruct {
  inner: Field,
}

struct ToTransferPublicStruct {
  inner: Field,
}

struct FromBurnPublicStruct {
  inner: Field,
}

// Interface for calling Token functions from a private context
struct TokenPrivateContextInterface {
  address: AztecAddress,
}

impl TokenPrivateContextInterface {
    pub fn at(address: AztecAddress) -> Self {
        Self { address }
    }

    pub fn transfer(
        self,
        context: &mut PrivateContext,
        from: FromTransferStruct,
        to: ToTransferStruct,
        amount: Field,
        nonce: Field
    ) -> [Field; RETURN_VALUES_LENGTH] {
        let mut serialized_args = [0; 4];
        serialized_args[0] = from.inner;
        serialized_args[1] = to.inner;
        serialized_args[2] = amount;
        serialized_args[3] = nonce;

        context.call_private_function(
            self.address,
            FunctionSelector::from_field(0xb1aa668a),
            serialized_args
        )
    }

    pub fn request_attestation(
        self,
        context: &mut PrivateContext,
        from: FromRequestAttestationStruct,
        attestor: AttestorRequestAttestationStruct,
        blacklist_root: Field,
        proof: [Field; 32],
        nonce: Field
    ) -> [Field; RETURN_VALUES_LENGTH] {
        let mut serialized_args = [0; 36];
        serialized_args[0] = from.inner;
        serialized_args[1] = attestor.inner;
        serialized_args[2] = blacklist_root;
        serialized_args[3] = proof[0];
        serialized_args[4] = proof[1];
        serialized_args[5] = proof[2];
        serialized_args[6] = proof[3];
        serialized_args[7] = proof[4];
        serialized_args[8] = proof[5];
        serialized_args[9] = proof[6];
        serialized_args[10] = proof[7];
        serialized_args[11] = proof[8];
        serialized_args[12] = proof[9];
        serialized_args[13] = proof[10];
        serialized_args[14] = proof[11];
        serialized_args[15] = proof[12];
        serialized_args[16] = proof[13];
        serialized_args[17] = proof[14];
        serialized_args[18] = proof[15];
        serialized_args[19] = proof[16];
        serialized_args[20] = proof[17];
        serialized_args[21] = proof[18];
        serialized_args[22] = proof[19];
        serialized_args[23] = proof[20];
        serialized_args[24] = proof[21];
        serialized_args[25] = proof[22];
        serialized_args[26] = proof[23];
        serialized_args[27] = proof[24];
        serialized_args[28] = proof[25];
        serialized_args[29] = proof[26];
        serialized_args[30] = proof[27];
        serialized_args[31] = proof[28];
        serialized_args[32] = proof[29];
        serialized_args[33] = proof[30];
        serialized_args[34] = proof[31];
        serialized_args[35] = nonce;

        context.call_private_function(
            self.address,
            FunctionSelector::from_field(0x8472c36c),
            serialized_args
        )
    }

    pub fn set_admin(self, context: &mut PrivateContext, new_admin: NewAdminSetAdminStruct) {
        let mut serialized_args = [0; 1];
        serialized_args[0] = new_admin.inner;

        context.call_public_function(
            self.address,
            FunctionSelector::from_field(0x41b90896),
            serialized_args
        )
    }

    pub fn redeem_shield(
        self,
        context: &mut PrivateContext,
        to: ToRedeemShieldStruct,
        amount: Field,
        secret: Field
    ) -> [Field; RETURN_VALUES_LENGTH] {
        let mut serialized_args = [0; 3];
        serialized_args[0] = to.inner;
        serialized_args[1] = amount;
        serialized_args[2] = secret;

        context.call_private_function(
            self.address,
            FunctionSelector::from_field(0xb77168f2),
            serialized_args
        )
    }

    pub fn unshield(
        self,
        context: &mut PrivateContext,
        from: FromUnshieldStruct,
        to: ToUnshieldStruct,
        amount: Field,
        nonce: Field
    ) -> [Field; RETURN_VALUES_LENGTH] {
        let mut serialized_args = [0; 4];
        serialized_args[0] = from.inner;
        serialized_args[1] = to.inner;
        serialized_args[2] = amount;
        serialized_args[3] = nonce;

        context.call_private_function(
            self.address,
            FunctionSelector::from_field(0x78303b89),
            serialized_args
        )
    }

    pub fn mint_private(self, context: &mut PrivateContext, amount: Field, secret_hash: Field) {
        let mut serialized_args = [0; 2];
        serialized_args[0] = amount;
        serialized_args[1] = secret_hash;

        context.call_public_function(
            self.address,
            FunctionSelector::from_field(0x10763932),
            serialized_args
        )
    }

    pub fn mint_public(self, context: &mut PrivateContext, to: ToMintPublicStruct, amount: Field) {
        let mut serialized_args = [0; 2];
        serialized_args[0] = to.inner;
        serialized_args[1] = amount;

        context.call_public_function(
            self.address,
            FunctionSelector::from_field(0x6bfd1d5b),
            serialized_args
        )
    }

    pub fn burn(
        self,
        context: &mut PrivateContext,
        from: FromBurnStruct,
        amount: Field,
        nonce: Field
    ) -> [Field; RETURN_VALUES_LENGTH] {
        let mut serialized_args = [0; 3];
        serialized_args[0] = from.inner;
        serialized_args[1] = amount;
        serialized_args[2] = nonce;

        context.call_private_function(
            self.address,
            FunctionSelector::from_field(0xd4fcc96e),
            serialized_args
        )
    }

    pub fn shield(
        self,
        context: &mut PrivateContext,
        from: FromShieldStruct,
        amount: Field,
        secret_hash: Field,
        nonce: Field
    ) {
        let mut serialized_args = [0; 4];
        serialized_args[0] = from.inner;
        serialized_args[1] = amount;
        serialized_args[2] = secret_hash;
        serialized_args[3] = nonce;

        context.call_public_function(
            self.address,
            FunctionSelector::from_field(0x1d24add0),
            serialized_args
        )
    }

    pub fn set_minter(self, context: &mut PrivateContext, minter: MinterSetMinterStruct, approve: bool) {
        let mut serialized_args = [0; 2];
        serialized_args[0] = minter.inner;
        serialized_args[1] = approve as Field;

        context.call_public_function(
            self.address,
            FunctionSelector::from_field(0x7f020b80),
            serialized_args
        )
    }

    pub fn transfer_public(
        self,
        context: &mut PrivateContext,
        from: FromTransferPublicStruct,
        to: ToTransferPublicStruct,
        amount: Field,
        nonce: Field
    ) {
        let mut serialized_args = [0; 4];
        serialized_args[0] = from.inner;
        serialized_args[1] = to.inner;
        serialized_args[2] = amount;
        serialized_args[3] = nonce;

        context.call_public_function(
            self.address,
            FunctionSelector::from_field(0x7db8f449),
            serialized_args
        )
    }

    pub fn burn_public(
        self,
        context: &mut PrivateContext,
        from: FromBurnPublicStruct,
        amount: Field,
        nonce: Field
    ) {
        let mut serialized_args = [0; 3];
        serialized_args[0] = from.inner;
        serialized_args[1] = amount;
        serialized_args[2] = nonce;

        context.call_public_function(
            self.address,
            FunctionSelector::from_field(0xb0e964d5),
            serialized_args
        )
    }
}

// Interface for calling Token functions from a public context
struct TokenPublicContextInterface {
  address: AztecAddress,
}

impl TokenPublicContextInterface {
    pub fn at(address: AztecAddress) -> Self {
        Self { address }
    }

    pub fn set_admin(
        self,
        context: PublicContext,
        new_admin: NewAdminSetAdminStruct
    ) -> [Field; RETURN_VALUES_LENGTH] {
        let mut serialized_args = [0; 1];
        serialized_args[0] = new_admin.inner;

        context.call_public_function(
            self.address,
            FunctionSelector::from_field(0x41b90896),
            serialized_args
        )
    }

    pub fn mint_private(
        self,
        context: PublicContext,
        amount: Field,
        secret_hash: Field
    ) -> [Field; RETURN_VALUES_LENGTH] {
        let mut serialized_args = [0; 2];
        serialized_args[0] = amount;
        serialized_args[1] = secret_hash;

        context.call_public_function(
            self.address,
            FunctionSelector::from_field(0x10763932),
            serialized_args
        )
    }

    pub fn mint_public(
        self,
        context: PublicContext,
        to: ToMintPublicStruct,
        amount: Field
    ) -> [Field; RETURN_VALUES_LENGTH] {
        let mut serialized_args = [0; 2];
        serialized_args[0] = to.inner;
        serialized_args[1] = amount;

        context.call_public_function(
            self.address,
            FunctionSelector::from_field(0x6bfd1d5b),
            serialized_args
        )
    }

    pub fn shield(
        self,
        context: PublicContext,
        from: FromShieldStruct,
        amount: Field,
        secret_hash: Field,
        nonce: Field
    ) -> [Field; RETURN_VALUES_LENGTH] {
        let mut serialized_args = [0; 4];
        serialized_args[0] = from.inner;
        serialized_args[1] = amount;
        serialized_args[2] = secret_hash;
        serialized_args[3] = nonce;

        context.call_public_function(
            self.address,
            FunctionSelector::from_field(0x1d24add0),
            serialized_args
        )
    }

    pub fn set_minter(
        self,
        context: PublicContext,
        minter: MinterSetMinterStruct,
        approve: bool
    ) -> [Field; RETURN_VALUES_LENGTH] {
        let mut serialized_args = [0; 2];
        serialized_args[0] = minter.inner;
        serialized_args[1] = approve as Field;

        context.call_public_function(
            self.address,
            FunctionSelector::from_field(0x7f020b80),
            serialized_args
        )
    }

    pub fn transfer_public(
        self,
        context: PublicContext,
        from: FromTransferPublicStruct,
        to: ToTransferPublicStruct,
        amount: Field,
        nonce: Field
    ) -> [Field; RETURN_VALUES_LENGTH] {
        let mut serialized_args = [0; 4];
        serialized_args[0] = from.inner;
        serialized_args[1] = to.inner;
        serialized_args[2] = amount;
        serialized_args[3] = nonce;

        context.call_public_function(
            self.address,
            FunctionSelector::from_field(0x7db8f449),
            serialized_args
        )
    }

    pub fn burn_public(
        self,
        context: PublicContext,
        from: FromBurnPublicStruct,
        amount: Field,
        nonce: Field
    ) -> [Field; RETURN_VALUES_LENGTH] {
        let mut serialized_args = [0; 3];
        serialized_args[0] = from.inner;
        serialized_args[1] = amount;
        serialized_args[2] = nonce;

        context.call_public_function(
            self.address,
            FunctionSelector::from_field(0xb0e964d5),
            serialized_args
        )
    }
}

