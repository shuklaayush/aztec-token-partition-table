{"noir_version":"0.25.0+ef33716219862f62848d19bf657b191ac15a8355","name":"Attestor","functions":[{"name":"constructor","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(initializer)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"authwit::aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"admin","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"param_witnesses":{"admin":[{"start":37,"end":38}],"inputs":[{"start":0,"end":37}]},"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_non_existent_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"reverted","type":{"kind":"boolean"}}]},"visibility":"public"},"return_witnesses":[38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239]},"bytecode":"","debug_symbols":""},{"name":"is_not_blacklisted","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"token","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"shield_id","type":{"kind":"field"},"visibility":"private"},{"name":"proof","type":{"kind":"array","length":32,"type":{"kind":"field"}},"visibility":"private"}],"param_witnesses":{"proof":[{"start":2,"end":34}],"shield_id":[{"start":1,"end":2}],"token":[{"start":0,"end":1}]},"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"},"return_witnesses":[34]},"bytecode":"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","debug_symbols":""},{"name":"add_to_blacklist","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"authwit::aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"token","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"shield_id","type":{"kind":"field"},"visibility":"private"},{"name":"proof","type":{"kind":"array","length":32,"type":{"kind":"field"}},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":37}],"proof":[{"start":39,"end":71}],"shield_id":[{"start":38,"end":39}],"token":[{"start":37,"end":38}]},"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_non_existent_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"reverted","type":{"kind":"boolean"}}]},"visibility":"public"},"return_witnesses":[71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272]},"bytecode":"","debug_symbols":""},{"name":"compute_note_hash_and_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":20,"type":{"kind":"field"}},"visibility":"private"}],"param_witnesses":{"contract_address":[{"start":0,"end":1}],"nonce":[{"start":1,"end":2}],"note_type_id":[{"start":3,"end":4}],"serialized_note":[{"start":4,"end":24}],"storage_slot":[{"start":2,"end":3}]},"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"},"return_witnesses":[24,25,26,27]},"bytecode":"H4sIAAAAAAAA/+2YS2/CMAyA0zbQF2UvNrqX1OOOVOLAsT9ifwCxSuMCE+3286fVEKtuGLvMPVjCUpRH0+SzkyZ2HXWQxyY5puw1aaCOBZ8XJp/9T3LGsWZ9cjpCOF0hnB4jJ7BNVL/7VPdgV27GgQDGoQBGXwBjIIAxFMAYCWCMBTCOBDAmAhjHAhgvBDBeCmC8EsB4LYDxRgDjRADjrQDGOwGMU0ZGhzBqU06bdN+kB3WI2RemPVCtFFwM83wFPjtOnqqugG/iYkW3bR5ykzbkd0kb/mPwdKvDkF2H2RzG9bnHNbFCSuyv+e2/CIidGNn7ssl+z+JexJjUJ3W0VWjKjP9Wcjq3Y1JI5lRmjbA8JX2xH9oD9zWyg4+LezP84z1tvZeQPsNf9C8Ur/6+xeNbzAOjCwj4Salu7WKzcf73gnEj/nE7a66tNYlIO/Z5NvmFaRvxr8M8Vt3zGHWmUpDyiNg+5ufJe9Jzv6aJGetb8Z4hY8tWgWWrhPRJiP3GPdjPIfPi2FjH+c7MZ+ZTzLHqfuPYRp9j7lq6UH8K+4fq+DxhVQgnpA6fY+DgGRyocJHAhear9tKIiLK4CHDQwkUDAS8ElBCwQUAEAQc49FMyxyknlzrCKE8mfzH56/u6ylbbTb1brursbVtW2WZbZ59VmX3s1l/LuoR6WakfY3kNz/IaAAA=","debug_symbols":"ndBNCoAgFATgu8xaIqJfrxItXmUgiIVaEOLdU6ID5O7NG77NeKh9ISd3bcE9yqKqwUcPe5BOD+vIOPCqbxiEXuM1lIFhk0qA112YWDJNhmkzTJdh+n8mhouMpFmJtEjqTr18A8Xo7uNtwgM="},{"name":"_assert_blacklist_root","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(internal)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"authwit::aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"token","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"rhs","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":37}],"rhs":[{"start":38,"end":39}],"token":[{"start":37,"end":38}]},"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_non_existent_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"reverted","type":{"kind":"boolean"}}]},"visibility":"public"},"return_witnesses":[39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240]},"bytecode":"","debug_symbols":"7b3tjiVLciT2Lvf3QEj/iHB3voqgH6MVBRAghovlSIBA8N2V3K1T3T1Td871qjJvi+7+xUsyM9LOiTKLLGszr//47V//7b/9+a//8m9/+fff/uk/frv+Nw357Z/+9//47d//+5//8l//l3//65//x19/+6frT7/981/+r/t//ueffvu//+Vf//m3f/L4z//jT//zBu3eYN0bvHvD6t6wuzdE94bs3lB/+IY//d1lGY8LM9frpSr6snheyMUFubgiFzfk4o5cfCEX38jFA7l4IhdHMrSQDC0kQwvJ0PrIz7l7vlzoXq+Xitpj8Y1c/CM/LR6PxZdcf7+4XRdycUEursjFDbm4IxdfyMU3cvFALp7IxZEMlY8wVP1xobq8Xvq6tOCWVtzShlvacUt/hJdm8nKhrXrrZ2QjFw/k4olcvICL64VcXJCLK3JxQy7uyMWRDFUkQxXJUEUyVJEMNSRDDclQQzLUkAw1JEMNyVBDMtSQDDUkQw3JUEcy1JEMdSRDHclQRzLUkQx1JEMdyVBHMtSRDF1Ihi4kQxeSoQvJ0PURhu5XO2HXFx9UJB+LL+TiH2GorHq5UFK++Vo6174ACRYgOQbE9HHx+q/VXh3weEApGihbp6Dsaz8u3tebUIwHivNAWTxQNg+U4IGSPFCKBkpcPFCEBwqP2gaP2gaP2gaP2gaP2gaP2gaP2gaP2iaP2iaP2iaP2iaP2iaP2iaP2iaP2iaP2iaP2iaP2haP2haP2haP2haP2haP2haP2haP2haP2haP2haN2vpFo7Z+0aitXzRq6xeN2vpFo7Z+0aitXzRq6xeN2vpFo7Z+8ait8Kit8Kit8Kit8Kit8Kit8Kit8Kit8Kit8Kit8Kit8qit8qit8qit8qit8qit8qit8qit8qit8qit8qit8ait8ait8ait8ait8ait8ait8ait8ait8ait8ait86it86it86it86it86it86it86it86it86it86jt4lHbxaO2i0dtF4/aLh61XTxqu3jUdvGo7eJR28WjtptHbTeP2vJ0yZynS+Y8XTLn6ZI5T5fMebpkztMlc54umfN0yZynS+Y8XTLn6ZI5T5fMebpkztMlc54umfN0yZynS+Y8XTLn6ZI5T5fMebpkztMlc54umfN0yZynS+Y8XTLn6ZI5T5fMebpkztMlc54umfN0yZynS+Y8XTLn6ZI5T5fMebpki6dLtni6ZIunS7Z4umRrsKq07BVK+FtQkgbKWClHNR8TDu//rLegKA8U44HiPFAWD5SplwQ1fTBILe0bKL2rX4DHqcCTEnh8GfkaVust4HUo8LEy0acDl1OB66nAx359C3msev+nvAVl80AJHijJA6VooMwVeMJfL454i0FzBZ7nUJQHivFAcR4oiwfK5oESPFCSB8qc2tbraPhUfQPKXFUl96vrkPst12GuqvIcivNAWTxQNg+U4IGSPFCKBspcVeU5FOGBwqO2i0dtF4/aLh61XTxqu3jUdvGo7eJR282jtptHbTeP2m4etd08art51HbzqO3mUdvNo7abR22DR22DR22DR22DR22DR22DR22DR22DR22DR22DR22TR22TR22TR22TR22TR22TR22TR22TR22TR22TR22LR22LR22LR22LR22LR22LR22LR22LR22LR22LRm33RaO2+6JR233RqO2+aNR2XzRquy8atd0Xjdrui0Zt90WjtvviUVvhUVvhUVvhUVvhUVvhUVvhUVvhUVvhUVvhUVvhUVvlUVvlUVvlUVvlUVvlUVvlUVvlUVvlUVvlUVvlUVvjUVvjUVvjUVvjUVvjUVvjUVvjUVvjUVvjUVvjUVvnUVvnUVueLtnm6ZJtni7Z5umSbZ4u2ebpkm2eLtnm6ZJtni7Z5umSbZ4u2ebpkm2eLtnm6ZJtni7Z5umSbZ4u2ebpkm2eLtnm6ZJtni7Z5umSbZ4u2ebpkm2eLtnm6ZJtni7Z5umSbZ4u2ebpkm2eLtnm6ZJtni7Z5umSbZ4u2ebpkm2eLtnm6ZJtni7Z5umSbZ4u2ebpku25qlLJ68Xl8haUpIEyVsrRq+Ll4vs/8y0oygPFeKA4D5TFA2VsNLzk42JV399A+furnw5x3mMVnk8HnqcCrzOBx1iZ6NOBy6nA9VTgRgD8BcrigcJwSLxAYZD9FygMQv4ChUGa/xcUYRDbFyg0f60peP5aU/D8tabg+WtNwfPXmmLurzU9hxI8UJIHStFAmfurR8+h8Kit8qit8qit8qit8qit8qit8qit8qit8qit8ait8ait8ait8ait8ait8ait8ait8ait8ait8ait86it86it86it86it86it86it86it86it86it86jtXGum8vGPMHpd8RYU44HiPFAWD5TNAyV4oCQPlKKBMteaeQ5FvgeUt/6Wc2zlgWI8UJwHylxEy/YrlPXWyTzWD/kDUIoGylg/5A9AER4oygNlLkpzPf6Ws4rkW1CcB8rigbJ5oAQPlOSBUjRQ8uKBIjxQlAcKTdA+xv7W0B+AQhO0j7G/NfQHoAQPlOSBUjRQ6uKBQlNrCp5aU/DUmoKn1hQ8taYoHrUtHrUtHrUtGrXNi0Zt86JR27xo1DYvGrXNi0Zt86JR27xo1DYvGrXNi0Zt8+JRW+FRW+FRW+FRW+FRW+FRW+FRW+FRW+GROOGROOWROOWROOWRuLl2g+ljmI5a2ltQigYKqN3wsrggF//Ij9bToQD5oVbBH1jescsv7PIbu3xgl0/s8gVd/kMJ+T+wvGCXx7LWsaz9UOLc71+ZX668//NLVi30sfqCrr6hqwd09YSuXsjVG3+v4eUG6d6g3Ruse4N3b1jdG3b3hujekN0bqnnD7u707u707u707u707u707u707u707u707u707u50dHc6ujsd3Z2O7k5Hd6eju9PR3eno7nR0dzq6O53dnc7uTmd3p7O709nd6ezudHZ3Ors7nd2dzu5OV3enq7vT1d3p6u50dXe6ujtd3Z2u7k5Xd6erudN1Xd0bpHuDdm+w7g3evWF1b9jdG6J7Q3Zv6O60dHdaujst3Z2W7k5Ld6elu9PS3Wnp7rR0d1q6O63dndbuTmt3p7W709rdae3utHZ3Wrs7rd2d1u5OW3enrbvT1t1p6+60dXfaujtt3Z227k5bd6etu9Pe3Wnv7rR3d9q7O+3dnfbuTnt3p727097dae/udNcjq65HVl2PrLoeWXU9sup6ZNX1yKrrkVXXI6uuR1Zdj6y6Hll1PbLqemTV9ciq65FV1yOrrkdWXY+suh5ZdT2y6npk1fXIquuRVdcjq65HVl2PrLoeWXU9sup6ZNX1yKrrkVXXI6uuR1Zdj6y6Hll1PbLqemTV9ciq65FV1yOrrkdWXY+suh5ZdT2y6npk1fXIquuRVdcjq65HJlfXJLvvkPYd2r7D2nd4+47VvmO374j2Hdm+o73n0t5zae+5tPdc2nsu7T2X9p5Le8+lvefS3nNp77m291zbe67tPdf2nmt7z7W959rec23vubb3XNt7bu09t/aeW3vPrb3n1t5za++5tffc2ntu7T239p57e8+9vefe3nNv77m399zbe+7tPff2nnt7z72956u956u956u956u956u956u956u956u956u956u957u957u957u957u957u957u957u957u957u957u959He82jvebT3PNp7Hu09j/aeR3vPo73n0d7zaO95tvc823ue7T3P9p5ne8+zvefZ3vNs73m29zzbe17tPa/2nld7z6u959Xe82rvebX3vNp7Xu09b/tw0vbhpO3DSduHk7YPd7++tu9Y7Tt2+45o35HtO9p73vbhpO3DSduHk7YPJ20fTto+nLR9OGn7cNL24aTtw0nbh5O2DydtH07aPpy0fThp+3DS9uGk7cNJ24eTtg8nbR9O2j6ctH04aftw0vbhpO3DSduHk7YPJ20fTto+nLR9OGn7cNL24aTtw0nbh5O2DydtH07aPpy0fThp+3DS9uGk7cNJ24eTtg8nbR9O2j6ctH04aftw0vbhpO3DyYbW9O/1Bby+gtc38PoOXn+B19/g9QO8foLXL+z6AeZvgPkbYP4GmL8B5m+A+Rtg/gaYvwHmb4D5m2D+Jpi/CeZvgvn7oT8Ise0xtmwvf730djbfmnEWj8Fvdn1Z1tYrkMUCZLMACRYgyQKkSIB86I9AfCoQYQGiLECMBQiLshaLshaLshaLshaLshaJsupFoqx6kSirXiTKqheJsupFoqx6kSirXiTKqheJsupFoqx6sSirsCirsCirsCirsCirsCirsCirsCirsCirsCirsCirsiirsiirsiirsiirsiirsiirsiirsiirsiirsiirsSirsSirYZT1sbpBV3fo6gu6+oauHtDVE7p6IVf3C7q6QFeHctWhXHUoVx3KVYdy1aFcdShXHcrVBeXqgnJ1Qbm6oFxdUK4uKFfXh7i612P1qA++WK1gAZIsQIoEyIcy2p8KRFiAKAsQYwHiLEAWCxAWZd0syrpZlHWzKGuwKGuwKGuwKGuwKGuwKGuwKGuwKGuwKGuwKGuwKGuyKGuyKGuyKGuyKGuyKGuyKGuyKGuyKGuyKGuyKGuxKGuxKGuxKGuxKGuxKGuxKGuxKGuxKGuxKGuRKKtdJMpqF4my2kWirHaRKKtdJMpqF4my2kWirHaRKKtdJMpqF4uyCouyCouyCouyCouyCouyCouyCouyCouyCouyCouyKouyKouyKouyKouyKouyKouyKouyKouyKouyKouyGouyGouyGouyGouyGouyGouyGouyGouyGouyGouyOouyOouyOouyOouyOouyOouyOouyOouyOouyOouyLhZlXSzKuliUdbEo62JR1sWirCwdLGPpYBlLB8tYOljG0sEylg6WsXSwjKWDZSwdLGPpYBlLB8tYOljG0sEylg6WsXSwjKWDZSwdLGPpYBlLB8tYOljG0sEylg6WsXSwjKWDZSwdLGPpYBlLB8tYOljG0sEylg6WsXSwjKWDZSwdLGPpYBlLB8tYOljG0sEylg6WsXSwjKWDZSwdLGPpYBlLB8tYOljO0sFylg6Ws3SwnKWD5ReJsjpLB8tZOljO0sFylg6Ws3SwnKWD5SwdLGfpYDlLB8tZOljO0sFylg6Ws3SwnKWD5SwdLGfpYDlLB8tZOljO0sFylg6Ws3SwnKWD5SwdLGfpYDlLB8tZOljO0sFylg6Ws3SwnKWD5SwdLGfpYDlLB8tZOljO0sFylg6Ws3SwnKWD5SwdLGfpYDlLB8tZOljO0sFylg6Ws3SwnKWD5SwdLGfpYDlLB8tZOljO0sFylg6Ws3SwnKWD5SwdLGfpYDlLB8tZOljO0sFylg6Ws3SwnKWD5SwdLGfpYDlLB8tZOljO0sFylg6Ws3SwnKWD5SwdLGfpYDlLB8tZOljO0sFylg6Ws3SwnKWD5SwdLGfpYDlLB8tZOljO0sFylg6Ws3SwnKWD5SwdLGfpYDlLB8tZOljO0sFylg6Ws3SwnKWD5SwdrMXSwVosHazF0sFaLB2sdZEo62LpYC2WDtZi6WAtlg7WYulgLZYO1mLpYC2WDtZi6WAtlg7WYulgLZYO1mLpYC2WDtZi6WAtlg7WYulgLZYO1mLpYC2WDtZi6WAtlg7WYulgLZYO1mLpYC2WDtZi6WAtlg7WYulgLZYO1mLpYC2WDtZi6WAtlg7WYulgLZYO1mLpYC2WDtZi6WAtlg7WYulgLZYO1mLpYC2WDtZi6WAtlg7W+lgHq/Tlwrj2N0Aeqyt0dYOu7tDVF3T1DV09oKsndPVCrv6xAtDT1aFc3VCubihXN5SrG8rVDeXqhnJ1Q7m6oVwNKFcDytWAcjWgXA0oVz/UvXj2svShPsXTxQO5eCIXL+DiH+onPF1ckIsrcnFDLu7IxZEMTSRDE8nQRDI0kQwtJEMLydBCMrSQDC0kQwvJ0EIytJAMLSRDP5St/oOX3a/rLxfeIvzl5Un2C4j9oVz1p4EQBhDKAMIYQDgDiMUAYjOACAYQyQCCQTGFQTGFQTGFQTGFQTGFQTGFQTGFQTGFQTGFQTGFQTGVQTGVQTGVQTF1QDF3PEDs+hpEvoJwBhCLAcRmABEMIJIBRBGAsIsBhDCAUAYQDIppDIppDIppDIppDIppDIppDIrpDIrpDIrpDIrpDIrpDIrpDIrpDIrpn66Yj4UTtXCBFl4XamFBLayohQ21sKMWXqiFN2phFPMWinkLxbyNYt5GMW+jmLdRzNso5m0U8zaKeRvFvI1i3kYxL1DMC4a37mB46w6Gt+5wBhAMb93B8NYdDD5FMPgUweBTJINPkQyKmQyKmQyKmQyKmQyKmQyKmQyKmQyKmQyKWQyKWQyKWQyKWQyKWQyKWQx5q2LIWxVD3qoY8lYMmf5gyPQHQ6Y/GDL9wZDpj8sZQBAoZjBk+oMh0x8Mmf5gyPQHQ6Y/GDL9wZDpD4ZMfzBk+oMh0x8Mmf5gyPQHQ6Y/BPQvNKEXamFBLayohQ21sKMWXqiFN2rhQC2cqIVRzDMU8wzFPEMxz1DMMxTzDMU8QzHPUMwzFPMMxTxHMc9RzHMU8xzFPEcxz1HMcxTzUBnYQGVgA5WBDVQGNlAZ2EBlYAOVgQ1UBjZQGdhAZWADlYENVAY2UBnYQGVgA5WBDVQGNlAZ2EBlYAOVgQ1UBjYaGdjHHdm+o7p3NOKojzukfYe277D2Hd6+Y7Xv2O072nse7T2P9p5ne8+zvefZ3vNs73m29zzbe57tPc/2nmd7z7O959Xe82rvebX3vNp7Xu09r/aeV3vPq73n1d7z6u55Xlf7Dmnfoe07rH2Ht+9Y7Tt2+45o35HtO9p7Lu09l/aeS3vPpb3n0t5zae+5tPdc2nsu7T2X9p5re8+1vefa3nNt77m291zbe67tPdf2nmt7z7W959bec2vvubX33Np7bu09t/aeW3vPrb3n1t5za++5t/fc23vu7T339p57e8+9vefe3nNv77m399zbe77ae77ae77ae77ae77ae77ae77ae77ae77ae77ae77be77be77be77be77be77be77be9724bLtw2Xbh8u2D5dtHy7bPly2fbhs+3DZ9uGy7cNl24fLtg+XbR8u2z5ctn24bPtw2fbhsu3DZduHy7YPl20fLts+XLZ9uGz7cNn24bLtw2Xbh8u2D5dtHy7bPly2fbhs+3DZ9uGq7cNV24ertg9XbR+u2j5ctX24avtw1fbhqu3DVduHq7YPV20frto+XLV9uGr7cNX24artw1Xbh6u2D1dtH67aPly1fbhq+3DV9uGq7cNV24ertg9XbR+u2j5ctX24avtw1fbhqu3DVduHq7YPV20frto+XLV9uGr7cNX24artw1Xbh6u2D1dtH67aPly1fbhq+3DV9uGq7cNV24ertg9XbR+u2j5ctX24avtw1fbhqu3DVduHq7YPV20frto+XLV9uGr7cNX24artw1Xbh6u2D1dtH67aPly1fbhq+3DV9uGq7cNV24ertg9XbR+u2j5ctX24avtw1fbhqu3DVduHq7YPV20frto+XLV9uGr7cNX24artw1Xbh6u2D1dtH67aPly1fbhq+3DV9uGq7cNV24ertg9XXR9Or64Pd98h7Tu0fYe17/D2Hat9x27fEe07sn1He8+lvefS3nNp77m091zaey7tPZf2nkt7z6W959Lec23vubb3XNt7ru091/aea3vPtb3n2t5zbe+5tvfc2ntu7T239p5be8+tvefW3nNr77m199zae27tPff2nnt7z729597ec2/vubf33Nt77u099/aee3vPV3vPV3vPV3vPV3vPV3vPV3vPV3vPV3vPV3vPV3vPd3vPd3vPd3vPd3vPd3vPd3vPd3vPd3vPd3vPd3vPo73n0d7zaO95tPc82nse7T2P9p5He8+jvefR3vNs73m29zzbe57tPc/2nmd7z7O959ne82zvebb3vNp7Xu09r/aeV3vPq73n1d7zau95tfe82nve9uGk7cNJ24eTtg8nbR9O2j6ctH04aftw0vbhpO3DSduHk7YPJ20fTto+nLR9OGn7cNL24aTtw0nbh5O2DydtH07aPpy0fThp+3DS9uGk7cNJ24eTtg8nbR9O2j6ctH04aftw0vbhpO3DSduHk7YPJ20fTto+nLR9OGn7cNL24aTtw0nbh5O2DydtH07aPpy0fThp+3DS9uGk7cNJ24eTtg8nbR9O2j6ctH04aftw0vbhpO3DSduHk7YPJ20fTto+nLR9OGn7cNL24aTtw0nbh5O2DydtH07aPpy0fThp+3DS9uGk7cNJ24eTtg8nbR9O2j6ctH04aftw0vbhpO3DSduHk7YPJ20fTto+nLR9OGn7cNL24aTtw0nbh5O2DydtH07aPpy0fThp+3DS9uGk7cNJ24eTtg8nbR9O2z6ctn04bftw2vbh7n9Gbt+x2nfs9h3RviPbd7T3vO3DaduH07YPp20fTts+nLZ9OG37cNr24bTtw2nbh9O2D6dtH07bPpy2fTht+3Da9uG07cNp24fTtg+nbR9O2z6ctn04bftw2vbhtO3DaduH07YPp20fTts+nLZ9OG37cNr24bTtw2nbh9O2D6dtH07bPpy2fTht+3Da9uG07cNp24fTtg+nbR9O2z6ctn04bftw2vbhtO3DaduH07YPp20fTts+nLZ9OG37cNr24bTtw2nbh9O2D6dtH07bPpy2fTht+3Da9uG07cNp24fTtg+nbR9O2z6ctn04bftw2vbhtO3DaduH07YPp20fTts+nLZ9OG37cNr24bTtw2nbh9O2D6dtH07bPpy2fTht+3Da9uG07cNp24eztg9nbR/O2j6ctX04a/tw1vbhrO3DWduHs7YPZ20fzto+nLV9OGv7cNb24aztw1nbh7O2D2dtH87aPpy1fThr+3DW9uGs7cNZ24eztg9nbR/O2j6ctX04a/tw1vbhrO3DWduHs7YPZ20fzto+nLV9OGv7cNb24aztw1nbh7O2D2dtH87aPpy1fThr+3DW9uGs7cNZ24eztg9nbR/O2j6ctX04a/tw1vbhrO3DWduHs7YPZ20fzto+nLV9OGv7cNb24aztw1nbh7O2D2dtH87aPpy1fThr+3DW9uGs7cNZ24eztg9nbR/O2j6ctX04a/tw1vbhrO3DWduHs7YPZ20fzto+nLV9OGv7cNb24aztw1nbh7O2D2dtH87aPpy1fThr+3DW9uGs7cNZ24eztg9nbR/O2j6ctX04b/tw3vbhvO3DeduH87YP520fzts+nLd9OG/7cN724bztw3nbh/O2D+dtH87bPpy3fThv+3De9uG87cN524fztg/nbR/O2z6ct304b/tw3vbhvO3DeduH87YP520fzts+nLd9OG/7cN724bztw3nbh/O2D+dtH87bPpy3fThv+3De9uG87cN524fztg/nbR/O2z6ct304b/tw3vbhvO3DeduH87YP520fzts+nLd9OG/7cN724bztw3nbh/O2D+dtH87bPpy3fThv+3De9uG87cN524fztg/nbR/O2z6ct304b/tw3vbhvO3DeduH87YP520fzts+nLd9OG/7cN724bztw3nbh/O2D+dtH87bPpy3fThv+3De9uG87cN524fztg/nbR/O2z6ct304b/tw3vbhvO3DeduHW20fbrV9uNX24Vbbh1ttH261fbjV9uFW24dbbR9utX241fbhVtuHW20fbrV9uNX24Vbbh1ttH261fbjV9uFW24dbbR9utX241fbhVtuHW20fbrV9uNX24Vbbh1ttH261fbjV9uFW24dbbR9utX241fbhVtuHW20fbrV9uNX24Vbbh1ttH261fbjV9uFW24dbbR9utX241fbhVtuHW20fbrV9uNX24Vbbh1ttH261fbjV9uFW24dbbR9utX241fbhVtuHW20fbrV9uNX24Vbbh1ttH261fbjV9uFW24dbbR9utX241fbhVtuHW20fbrV9uNX24Vbbh1ttH261fbjV9uFW24dbbR9utX241fbhVtuHW20fbrV9uNX24Vbbh1ttH261fbjV9uFW24dbbR9utX241fbhVtuHW20fbrV9uNX24Vbbh9ttH263fbjd9uF224fbbR9ut3243fbhdtuH220fbrd9uN324Xbbh9ttH263fbjd9uF224fbbR9ut3243fbhdtuH220fbrd9uN324Xbbh9ttH263fbjd9uF224fbbR9ut3243fbhdtuH220fbrd9uN324Xbbh9ttH263fbjd9uF224fbbR9ut3243fbhdtuH220fbrd9uN324Xbbh9ttH263fbjd9uF224fbbR9ut3243fbhdtuH220fbrd9uN324Xbbh9ttH263fbjd9uF224fbbR9ut3243fbhdtuH220fbrd9uN324Xbbh9ttH263fbjd9uF224fbbR9ut3243fbhdtuH220fbrd9uN324Xbbh9ttH243fLg//d1lXvpy4f1v5K+Xqujr6hu6ekBXT+jqhVy94TG+Z3WBrq7Q1Q26ukNXh3K1oFwtKFcLytVCcjWuC7q6QFdX6OoGXd2hqy/o6hu6ekBXT+jqUK4KlKsC5apAuSpQrgqUqwLlqkC5KlCuCpSrAuWqQrmqUK4qlKsK5apCuapQriqUqwrlqkK5qlCuGpSrBuWqQblqUK4alKsG5apBuWpQrhqUqwblqkO56lCuOpSrDuWqQ7nqUK46lKsO5apDuepQri4oVxeUqwvK1QXl6oJydUG5uqBcXVCuLihXF5SrG8rVDeXq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4tD5PnHofJ84dL5PHDrfJw6d7xOHzveJQ+f7xKHzfeLQ+T556HyfPHS+Tx463ycPne+T15nnZR463ycPne+Th873yUPn++Sh833y0Pk+eeh8nzx0vk8eOt8nD53vk4fO98lD5/vkofN98tD5PnnofJ88dL5PHjrfJw+d75OHzvfJQ+f75KHzffLQ+T556HyfPHS+Tx463ycPne+Th873yUPn++Sh833y0Pk+eeh8nzx0vk8eOt8nD53vk4fO98lD5/vkofN98tD5PnnofJ88dL5PHjrfJw+d75OHzvfJQ+f75KHzffLQ+T556HyfPHS+Tx463ycPne+Th873yUPn++Sh833y0Pk+eeh8nzx0vk8eOt8nD53vk4fO98lD5/vkofN98tD5PnnofJ88dL5PHjrfJw+d75OHzvfJQ+f75KHzffLQ+T556HyfPHS+Tx463ycPne+Th873yUPn++Sh833y0Pk+eeh8nzx0vk8eOt8nD53vk4fO98lD5/vkofN98tD5PnnofJ88dL5PHjrfJw+d75OHzvfJQ+f75KHzffLQ+T556HyfOnS+Tx0636cOne9Th873qevM87IOne9Th873qUPn+9Sh833q0Pk+deh8nzp0vk8dOt+nDp3vU4fO96lD5/vUofN96tD5PnXofJ86dL5PHTrfpw6d71OHzvepQ+f71KHzferQ+T516HyfOnS+Tx0636cOne9Th873qUPn+9Sh833q0Pk+deh8nzp0vk8dOt+nDp3vU4fO96lD5/vUofN96tD5PnXofJ86dL5PHTrfpw6d71OHzvepQ+f71KHzferQ+T516HyfOnS+Tx0636cOne9Th873qUPn+9Sh833q0Pk+deh8nzp0vk8dOt+nDp3vU4fO96lD5/vUofN96tD5PnXofJ86dL5PHTrfpw6d71OHzvepQ+f71KHzferQ+T516HyfOnS+Tx0636cOne9Th873qUPn+9Sh833q0Pk+deh8nzp0vk8dOt+nDp3vU4fO96lD5/vUofN96tD5PnXofJ86dL5PHTrfpw6d71OHzvepQ+f71KHzferQ+T516HyfOnO+j19nzve5cR95Xt64jzwvb9xHnpc37iPPyxv3kefljfvI8/LGfeR5eeM+8ry8cR96Xp453+fGfeh5eeZ8nxv3oeflmfN9btyHnpdnzve5cR96Xp453+fGfeh5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KAZbRzHYOorB1lEMto5isHUUg62jGGwdxWDrKAZbRzHYOorB1lEMto5isHUUg62jGGwdxWDrKAZbRzHYOorB1lEMto5isHUUg62jGGwdxWDrKAZbRzHYOorB1lEMto5isHUUg62jGGwdxWDrKAZbRzHYOorB1lEMto5isHUUg62jGGwdxWDrKAZbRzHYOorB1lEMto5isHUUg62jGGwdxWDrKAZbRzHYOorJ1lFMto5isnUUk62jmBeZUidbRzHZOorJ1lFMto5isnUUk62jmGwdxWTrKCZbRzHZOorJ1lFMto5isnUUk62jmGwdxWTrKCZbRzHZOorJ1lFMto5isnUUk62jmGwdxWTrKCZbRzHZOorJ1lFMto5isnUUk62jmGwdxWTrKCZbRzHZOorJ1lFMto5isnUUk62jmGwdxWTrKCZbRzHZOorJ1lFMto5isnUUk62jmGwdxWTrKCZbRzHZOorJ1lFMto5isnUUk62jmGwdxWTrKCZbRzHZOorJ1lFMto5isnUUk62jmGwdxWTrKCZbRzHZOorJ1lFMto5isnUUk62jmGwdxWTrKCZbRzHZOorJ1lFMto5isnUUk62jmGwdxWTrKCZbRzHZOorJ1lFMto5isnUUk62jmGwdxWTrKCZbRzHZOorJ1lFMto5isnUUk62jmGwdxWLrKBZbR7HYOorF1lGsi0ypi62jWGwdxWLrKBZbR7HYOorF1lEsto5isXUUi62jWGwdxWLrKBZbR7HYOorF1lEsto5isXUUi62jWGwdxWLrKBZbR7HYOorF1lEsto5isXUUi62jWGwdxWLrKBZbR7HYOorF1lEsto5isXUUi62jWGwdxWLrKBZbR7HYOorF1lEsto5isXUUi62jWGwdxWLrKBZbR7HYOorF1lEsto5isXUUi62jWGwdxWLrKBZbR7HYOorF1lEsto5isXUUi62jWGwdxWLrKBZbR7HYOorF1lEsto5isXUUi62jWGwdxWLrKBZbR7HYOorF1lEsto5isXUUi62jWGwdxWLrKBZbR7HYOorF1lEsto5isXUUi62jWGwdxWLrKBZbR7HYOorF1lEsto5isXUUi62jWGwdxWLrKBZbR7HYOorF1lEsso7ivsg6ijcgLqW+AXEp9Q2IS6lvQFxKfQPiUuobEJdS34C4lPoGxKXUNyA2pSbrKN6A2JSarKN4A2JTarKO4g2ITanJOoo3IDalJuso3oDYlJqso3gDYlNqso7iDYhNqck6ijcgNqUm6yjegNiUmqyjeANiU2qyjuINiE2pyTqKNyA2pSbrKN6A2JSarKN4A2JTarKO4g2ITanJOoo3IDalJuso3oDYlJqso3gDYlNqso7iDYhNqck6ijcgNqUm6yjegNiUmqyjeANiU2qyjuINiE2pyTqKNyA2pSbrKN6A2JSarKN4A2JTarKO4g2ITanJOoo3IDalJuso3oDYlJqso3gDYlNqso7iDYhNqck6ijcgNqUm6yjegNiUmqyjeANiU2qyjuINiE2pyTqKNyA2pSbrKN6A2JSarKN4A2JTarKO4g2ITanJOoo3IDalJuso3oDYlJqso3gDYlNqso7iDYhNqck6ijcgNqUm6yjegMiUWtg6isLWURS2jqKwdRTlIlNqYesoCltHUdg6isLWURS2jqKwdRSFraMobB1FYesoCltHUdg6isLWURS2jqKwdRSFraMobB1FYesoCltHUdg6isLWURS2jqKwdRSFraMobB1FYesoCltHUdg6isLWURS2jqKwdRSFraMobB1FYesoCltHUdg6isLWURS2jqKwdRSFraMobB1FYesoCltHUdg6isLWURS2jqKwdRSFraMobB1FYesoCltHUdg6isLWURS2jqKwdRSFraMobB1FYesoCltHUdg6isLWURS2jqKwdRSFraMobB1FYesoCltHUdg6isLWURS2jqKwdRSFraMobB1FYesoCltHUdg6isLWURS2jqKwdRSFraMobB1FYesoCltHUdg6isLWURS2jqKwdRSFraMobB1FYesoCltHUdg6isLWURS2jqKwdRSFraOobB1FZesoKltHUdk6inqRKbWydRSVraOobB1FZesoKltHUdk6isrWUVS2jqKydRSVraOobB1FZesoKltHUdk6isrWUVS2jqKydRSVraOobB1FZesoKltHUdk6isrWUVS2jqKydRSVraOobB1FZesoKltHUdk6isrWUVS2jqKydRSVraOobB1FZesoKltHUdk6isrWUVS2jqKydRSVraOobB1FZesoKltHUdk6isrWUVS2jqKydRSVraOobB1FZesoKltHUdk6isrWUVS2jqKydRSVraOobB1FZesoKltHUdk6isrWUVS2jqKydRSVraOobB1FZesoKltHUdk6isrWUVS2jqKydRSVraOobB1FZesoKltHUdk6isrWUVS2jqKydRSVraOobB1FZesoKltHUdk6isrWUVS2jqKydRSVraOobB1FZesoKltHUdk6isrWUTS2jqKxdRSNraNobB1Fu8iU2tg6isbWUTS2jqKxdRSNraNobB1FY+soGltH0dg6isbWUTS2jqKxdRSNraNobB1FY+soGltH0dg6isbWUTS2jqKxdRSNraNobB1FY+soGltH0dg6isbWUTS2jqKxdRSNraNobB1FY+soGltH0dg6isbWUTS2jqKxdRSNraNobB1FY+soGltH0dg6isbWUTS2jqKxdRSNraNobB1FY+soGltH0dg6isbWUTS2jqKxdRSNraNobB1FY+soGltH0dg6isbWUTS2jqKxdRSNraNobB1FY+soGltH0dg6isbWUTS2jqKxdRSNraNobB1FY+soGltH0dg6isbWUTS2jqKxdRSNraNobB1FY+soGltH0dg6isbWUTS2jqKxdRSNraNobB1FY+soGltH0dg6isbWUTS2jqKxdRSNraNobB1FY+soOltH0dk6is7WUXS2jqJfZErtbB1FZ+soOltH0dk6is7WUXS2jqKzdRSdraPobB1FZ+soOltH0dk6is7WUXS2jqKzdRSdraPobB1FZ+soOltH0dk6is7WUXS2jqKzdRSdraPobB1FZ+soOltH0dk6is7WUXS2jqKzdRSdraPobB1FZ+soOltH0dk6is7WUXS2jqKzdRSdraPobB1FZ+soOltH0dk6is7WUXS2jqKzdRSdraPobB1FZ+soOltH0dk6is7WUXS2jqKzdRSdraPobB1FZ+soOltH0dk6is7WUXS2jqKzdRSdraPobB1FZ+soOltH0dk6is7WUXS2jqKzdRSdraPobB1FZ+soOltH0dk6is7WUXS2jqKzdRSdraPobB1FZ+soOltH0dk6is7WUXS2jqKzdRSdraPobB1FZ+soOltH0dk6is7WUXS2jqKzdRQXW0dxsXUUF1tHcbF1FNdFptSLraO42DqKi62juNg6iouto7jYOoqLraO42DqKi62juNg6iouto7jYOoqLraO42DqKi62juNg6iouto7jYOoqLraO42DqKi62juNg6iouto7jYOoqLraO42DqKi62juNg6iouto7jYOoqLraO42DqKi62j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"},{"name":"remove_from_blacklist","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"authwit::aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"token","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"shield_id","type":{"kind":"field"},"visibility":"private"},{"name":"proof","type":{"kind":"array","length":32,"type":{"kind":"field"}},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":37}],"proof":[{"start":39,"end":71}],"shield_id":[{"start":38,"end":39}],"token":[{"start":37,"end":38}]},"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_non_existent_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"reverted","type":{"kind":"boolean"}}]},"visibility":"public"},"return_witnesses":[71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272]},"bytecode":"","debug_symbols":""},{"name":"admin","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[],"param_witnesses":{},"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"return_witnesses":[0]},"bytecode":"H4sIAAAAAAAA/81UzU7DMAx20jZr2RBcOYB64Z5JPEB4Bd6gqAVxWaVuk+DlEWTY2kfm21KEpcrulx/bnx0bOophXSiYiGddAxb4O6yfIw9+7eIlJamy+P4qtpewzzJ2DZiBOGX9M1ec3q8v6ZSjGrgLGX2lNQhgF8BHum8J6xYwm5yNvN7DeqWccYo/sbEmUjqnnEWeKsglsO3PkwNP6CvAv/hbQRzuD+LBVg7wX/0T34v8vn1Nx/mQO6cGcggQv/grYc8d6yv6qbngEhf2f5QVcNPAvc1MuUg9TFIf8YfvCd+YhVxlP86enHMu3utmyB9zI+ABJYA991u9YG6jbHfj1L0OT0PXGwitTMJEbZQ0LGBoFwpG9HtUloBJe2otgGM2beeGTinN2r8F6aKRgdgt6xvWj9PUfbRvm354b8f9rh1f2udxv+m39AUjxhEonggAAA==","debug_symbols":"zdjNaoNAFAXgd5m1lHvv/OqrlC6mqQVBTIi2UMR3r+JPFpGESCJn5+C5zIfgGZhWlcdDbIpjVausVfRmVfbeqvoUq2FdN/HcqMySd4nKq6/hMXVdor6LMleZ8V1yFWZmP4WZTVjCzGElrb1MYcN6yQbTfSS9xkFpPJQmQGlSKA0TFoexOILF0Vgcg8XBamTGqmTG6mTGKmXGamXBamV5bSuPe8gOezyjP21Y9gh057PeSo8iAyeye4vI2jlNzixpYZlEDk7k4UQBTpSiiTTBiRhOJLuLNF1EdkWk4USrf7+4+ezRZK5OUB02zKSPzxjaMMMbZuSxmX7xG89F/Czz4fpkePdTHebblH7Z/J3GN90/"},{"name":"get_blacklist_root","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"token","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"param_witnesses":{"token":[{"start":0,"end":1}]},"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"return_witnesses":[1]},"bytecode":"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","debug_symbols":""},{"name":"request_attestation","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"authwit::aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"authwit::aztec::context::globals::private_global_variables::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"partition_table","type":{"kind":"struct","path":"common_types::partition_table::PartitionTable","fields":[{"name":"shield_ids","type":{"kind":"struct","path":"common_types::bounded_vec2::BoundedVec2","fields":[{"name":"len","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"elems","type":{"kind":"array","length":6,"type":{"kind":"field"}}}]}},{"name":"attestations","type":{"kind":"struct","path":"common_types::bounded_vec2::BoundedVec2","fields":[{"name":"len","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"elems","type":{"kind":"array","length":6,"type":{"kind":"field"}}}]}},{"name":"max_block_number","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"is_table_cleared","type":{"kind":"boolean"}}]},"visibility":"private"},{"name":"blacklist_root","type":{"kind":"field"},"visibility":"private"},{"name":"proofs","type":{"kind":"array","length":192,"type":{"kind":"field"}},"visibility":"private"}],"param_witnesses":{"blacklist_root":[{"start":49,"end":50}],"inputs":[{"start":0,"end":33}],"partition_table":[{"start":33,"end":49}],"proofs":[{"start":50,"end":242}]},"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash_read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"authwit::aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[1433,1434,1435,1436,1437,1438,1439,1440,1441,1442,1443,1444,1445,1446,1447,1448,1449,1450,1451,1452,1453,1454,1455,1456,1457,1458,1459,1460,1461,1462,1463,1464,1465,1466,1467,1468,1469,1470,1471,1472,1473,1474,1475,1476,1477,1478,1479,1480,1481,1482,1483,1484,1485,1486,1487,1488,1489,1490,1491,1492,1493,1494,1495,1496,1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,1515,1516,1517,1518,1519,1520,1521,1522,1523,1524,1525,1526,1527,1528,1529,1530,1531,1532,1533,1534,1535,1536,1537,1538,1539,1540,1541,1542,1543,1544,1545,1546,1547,1548,1549,1550,1551,1552,1553,1554,1555,1556,1557,1558,1559,1560,1561,1562,1563,1564,1565,1566,1567,1568,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1582,1583,1584,1585,1586,1587,1588,1589,1590,1591,1592,1593,1594,1595,1596,1597,1598,1599,1600,1601,1602,1603,1604,1605,1606,1607,1608,1609,1610,1611,1612,1613,1614,1615,1616,1617,1618,1619,1620,1621,1622,1623,1624,1625,1626,1627,1628,1629,1630,1631,1632,1633,1634,1635,1636,1637,1638,1639,1640,1641,1642]},"bytecode":"","debug_symbols":""}],"events":[],"file_map":{"3":{"source":"struct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: u64,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new() -> Self {\n        let zeroed = crate::unsafe::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: u64) -> T {\n        assert(index as u64 < self.len);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: u64) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen as u64, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn len(self) -> u64 {\n        self.len\n    }\n\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u64 {\n        MaxLen\n    }\n\n    // This is a intermediate method, while we don't have an\n    // .extend method\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    pub fn extend_from_array<Len>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    pub fn extend_from_bounded_vec<Len>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::unsafe::zeroed();\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n","path":"std/collections/bounded_vec.nr"},"20":{"source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n\n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n\n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n","path":"std/field.nr"},"30":{"source":"mod poseidon;\nmod mimc;\nmod poseidon2;\nmod pedersen;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\n\n#[foreign(sha256)]\n// docs:start:sha256\npub fn sha256<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:sha256\n{}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\nstruct PedersenPoint {\n   x : Field,\n   y : Field,\n}\n\npub fn pedersen_commitment<N>(input: [Field; N]) -> PedersenPoint\n// docs:end:pedersen_commitment\n{\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[foreign(pedersen_commitment)]\npub fn __pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\npub fn pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> PedersenPoint {\n    let values = __pedersen_commitment_with_separator(input, separator);\n    PedersenPoint { x: values[0], y: values[1] }\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<N>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator<N>(input: [Field; N], separator: u32) -> Field {}\n\npub fn hash_to_field<N>(input: [Field; N]) -> Field {\n    let mut inputs_as_bytes = [];\n\n    for i in 0..N {\n        let input_bytes = input[i].to_le_bytes(32);\n        for i in 0..32 {\n            inputs_as_bytes = inputs_as_bytes.push_back(input_bytes[i]);\n        }\n    }\n\n    let hashed_input = blake2s(inputs_as_bytes);\n    crate::field::bytes32_to_field(hashed_input)\n}\n\n#[foreign(keccak256)]\n// docs:start:keccak256\npub fn keccak256<N>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<N>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: [u32; 16], _state: [u32; 8]) -> [u32; 8] {}\n\n// Generic hashing support. \n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\ntrait Hash{\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\ntrait Hasher{\n    fn finish(self) -> Field;\n    \n    fn write(&mut self, input: [Field]);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\ntrait BuildHasher<H> where H: Hasher{\n    fn build_hasher(self) -> H;\n}\n\nstruct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn build_hasher(_self: Self) -> H{\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn default() -> Self{\n        BuildHasherDefault{}\n    }    \n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self]);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self as Field]);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self as Field]);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self as Field]);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self as Field]);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self as Field]);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self as Field]);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self as Field]);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self.lo as Field, self.hi as Field]);\n    }\n}\n\nimpl<T, N> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n","path":"std/hash.nr"},"33":{"source":"// Regular merkle tree means a append-only merkle tree (Explain why this is the only way to have privacy and alternatives if you don't want it)\n// Currently we assume that it is a binary tree, so depth k implies a width of 2^k\n// XXX: In the future we can add an arity parameter\n// Returns the merkle root of the tree from the provided leaf, its hashpath, using a pedersen hash function.\npub fn compute_merkle_root<N>(leaf: Field, index: Field, hash_path: [Field; N]) -> Field {\n    let n = hash_path.len();\n    let index_bits = index.to_le_bits(n as u32);\n    let mut current = leaf;\n    for i in 0..n {\n        let path_bit = index_bits[i] as bool;\n        let (hash_left, hash_right) = if path_bit {\n            (hash_path[i], current)\n        } else {\n            (current, hash_path[i])\n        };\n        current = crate::hash::pedersen_hash([hash_left, hash_right]);\n    }\n    current\n}\n","path":"std/merkle.nr"},"35":{"source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\nstruct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<N, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else {\n            if other._is_some {\n                Ordering::less()\n            } else {\n                Ordering::equal()\n            }\n        }\n    }\n}\n","path":"std/option.nr"},"47":{"source":"// The Attestor contract tracks blacklisted deposit IDs. \n// Attestations are dispensed if a note’s partition table does not intersect with the blacklist.\n\n// The blacklist must be accessible from private functions. A possible solution is to store the blacklist as an indexed merkle tree. \n// Race conditions that arise from updating the tree can be deferred and considered out-of-scope for the MPV.\n\n// The request_attestation method requires a set-non-intersection check that is of independent interest and should be implemented as a 3rd party library.\n\ncontract Attestor {\n    ////////////////////////////////////////////////////////////////////////////////\n    // IMPORTS\n    ////////////////////////////////////////////////////////////////////////////////\n\n    use dep::aztec::prelude::{emit_unencrypted_log, NoteHeader, Map, PublicMutable, SharedImmutable, FunctionSelector, AztecAddress};\n\n    use dep::common_types::{smt, partition_table::{PartitionTable, BOUNDED_VEC_LEN}};\n\n    ////////////////////////////////////////////////////////////////////////////////\n    // CONSTANTS\n    ////////////////////////////////////////////////////////////////////////////////\n\n    global DEPTH: u64 = 32;\n    global EMPTY_ROOT: Field = 0x16642d9ccd8346c403aa4c3fa451178b22534a27035cdaa6ec34ae53b29c50cb;\n\n    ////////////////////////////////////////////////////////////////////////////////\n    // STORAGE\n    ////////////////////////////////////////////////////////////////////////////////\n\n    struct Storage {\n        admin: PublicMutable<AztecAddress>,\n        blacklists: Map<AztecAddress, PublicMutable<Field>>,\n    }\n\n    ////////////////////////////////////////////////////////////////////////////////\n    // CONSTRUCTOR\n    ////////////////////////////////////////////////////////////////////////////////\n\n    #[aztec(public)]\n    #[aztec(initializer)]\n    fn constructor(admin: AztecAddress) {\n        assert(!admin.is_zero(), \"invalid admin\");\n        storage.admin.write(admin);\n    }\n\n    ////////////////////////////////////////////////////////////////////////////////\n    // PUBLIC\n    ////////////////////////////////////////////////////////////////////////////////\n\n    #[aztec(public)]\n    pub fn add_to_blacklist(token: AztecAddress, shield_id: Field, proof: [Field; DEPTH]) {\n        assert(storage.admin.read().eq(context.msg_sender()), \"caller is not admin\");\n\n        let mut old_root = storage.blacklists.at(token).read();\n        if old_root == 0 {\n            old_root = EMPTY_ROOT;\n        }\n        let new_root = smt::insert(shield_id, old_root, proof);\n\n        storage.blacklists.at(token).write(new_root);\n\n        emit_unencrypted_log(&mut context, token);\n        emit_unencrypted_log(&mut context, shield_id);\n    }\n\n    #[aztec(public)]\n    pub fn remove_from_blacklist(token: AztecAddress, shield_id: Field, proof: [Field; DEPTH]) {\n        assert(storage.admin.read().eq(context.msg_sender()), \"caller is not admin\");\n\n        let old_root = storage.blacklists.at(token).read();\n        let new_root = smt::remove(shield_id, old_root, proof);\n\n        storage.blacklists.at(token).write(new_root);\n\n        emit_unencrypted_log(&mut context, token);\n        emit_unencrypted_log(&mut context, shield_id);\n    }\n\n    ////////////////////////////////////////////////////////////////////////////////\n    // PRIVATE\n    ////////////////////////////////////////////////////////////////////////////////\n\n    #[aztec(private)]\n    fn request_attestation(\n        partition_table: PartitionTable,\n        blacklist_root: Field,\n        proofs: [Field; DEPTH * BOUNDED_VEC_LEN]\n    ) -> bool {\n        let token = context.msg_sender();\n\n        // TODO: Use slow updates tree\n        let selector = FunctionSelector::from_signature(\"_assert_blacklist_root((Field),Field)\");\n        context.call_public_function(\n            context.this_address(),\n            selector,\n            [token.to_field(), blacklist_root]\n        );\n\n        let shield_ids = partition_table.shield_ids.elems;\n        let mut res = true;\n        let mut proof = [0; DEPTH];\n        for i in 0..shield_ids.len() {\n            for j in 0..DEPTH {\n                proof[j] = proofs[i * DEPTH + j];\n            }\n            if !smt::verify(shield_ids[i], blacklist_root, proof) {\n                res = false;\n            }\n        }\n        res\n    }\n\n    ////////////////////////////////////////////////////////////////////////////////\n    // INTERNAL\n    ////////////////////////////////////////////////////////////////////////////////\n\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn _assert_blacklist_root(token: AztecAddress, rhs: Field) {\n        let mut lhs = storage.blacklists.at(token).read();\n        if lhs == 0 {\n            lhs = EMPTY_ROOT;\n        }\n        assert(lhs == rhs, \"incorrect blacklist root\");\n    }\n\n    ////////////////////////////////////////////////////////////////////////////////\n    // UNCONSTRAINED\n    ////////////////////////////////////////////////////////////////////////////////\n\n    unconstrained fn admin() -> pub Field {\n        storage.admin.read().to_field()\n    }\n\n    unconstrained fn get_blacklist_root(token: AztecAddress) -> pub Field {\n        let mut root = storage.blacklists.at(token).read();\n        if root == 0 {\n            root = EMPTY_ROOT;\n        }\n        root\n    }\n\n    unconstrained fn is_not_blacklisted(\n        token: AztecAddress,\n        shield_id: Field,\n        proof: [Field; DEPTH]\n    ) -> pub bool {\n        let mut root = storage.blacklists.at(token).read();\n        if root == 0 {\n            root = EMPTY_ROOT;\n        }\n        smt::verify(shield_id, root, proof)\n    }\n}\n","path":"/Users/ayush/projects/aztec-ws/aztec-token-partition-table/src/contracts/attestor/src/main.nr"},"56":{"source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::oracle;\nuse dep::protocol_types::{address::AztecAddress, grumpkin_point::GrumpkinPoint};\n\npub fn emit_encrypted_log<N>(\n    context: &mut PrivateContext,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    encryption_pub_key: GrumpkinPoint,\n    log: [Field; N]\n) {\n    let _ = oracle::logs::emit_encrypted_log(\n        contract_address,\n        storage_slot,\n        note_type_id,\n        encryption_pub_key,\n        log\n    );\n    context.accumulate_encrypted_logs(log);\n}\n\npub fn emit_unencrypted_log<T>(context: &mut PublicContext, log: T) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n\n// TODO: We might want to remove this since emitting unencrypted logs from private functions is violating privacy.\n// --> might be a better approach to force devs to make a public function call that emits the log if needed then\n// it would be less easy to accidentally leak information.\n// If we decide to keep this function around would make sense to wait for traits and then merge it with emit_unencrypted_log.\npub fn emit_unencrypted_log_from_private<T>(context: &mut PrivateContext, log: T) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n","path":"/Users/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.0/noir-projects/aztec-nr/aztec/src/log.nr"},"72":{"source":"use crate::{\n    context::{inputs::PublicContextInputs, interface::ContextInterface},\n    messaging::process_l1_to_l2_message, oracle::{arguments, public_call::call_public_function_internal}\n};\nuse dep::protocol_types::{\n    abis::{\n    global_variables::GlobalVariables, function_selector::FunctionSelector,\n    private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem,\n    public_circuit_public_inputs::PublicCircuitPublicInputs, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NEW_NOTE_HASHES_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256, RETURN_VALUES_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    hash::hash_args, header::Header, messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader\n};\n\nstruct PublicContext {\n    inputs: PublicContextInputs,\n    side_effect_counter: u32,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    nullifier_non_existent_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL>,\n    contract_storage_update_requests: BoundedVec<StorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_reads: BoundedVec<StorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack_hashes: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_note_hashes: BoundedVec<SideEffect, MAX_NEW_NOTE_HASHES_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n    prover_address: AztecAddress,\n}\n\nimpl ContextInterface for PublicContext {\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.new_note_hashes.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash {\n            value: nullifier,\n            note_hash: 0, // cannot nullify pending notes in public context\n            counter: self.side_effect_counter\n        };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n}\n\nimpl PublicContext {\n    pub fn new(inputs: PublicContextInputs, args_hash: Field) -> PublicContext {\n        PublicContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter,\n            args_hash,\n            return_values: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            nullifier_non_existent_read_requests: BoundedVec::new(),\n            contract_storage_update_requests: BoundedVec::new(),\n            contract_storage_reads: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            new_note_hashes: BoundedVec::new(),\n            new_nullifiers: BoundedVec::new(),\n            new_l2_to_l1_msgs: BoundedVec::new(),\n            unencrypted_logs_hash: BoundedVec::new(),\n            unencrypted_logs_preimages_length: 0,\n            historical_header: inputs.historical_header,\n            prover_address: AztecAddress::zero() // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn coinbase(self) -> EthAddress {\n        self.inputs.public_global_variables.coinbase\n    }\n\n    pub fn fee_recipient(self) -> AztecAddress {\n        self.inputs.public_global_variables.fee_recipient\n    }\n\n    pub fn finish(self) -> PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            nullifier_non_existent_read_requests: self.nullifier_non_existent_read_requests.storage,\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_reads: self.contract_storage_reads.storage,\n            return_values: self.return_values.storage,\n            new_note_hashes: self.new_note_hashes.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            unencrypted_logs_hash,\n            unencrypted_log_preimages_length,\n            historical_header: self.inputs.historical_header,\n            prover_address: self.prover_address,\n            reverted: false\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.side_effect_counter };\n        self.nullifier_read_requests.push(request);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_nullifier_non_existent_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.side_effect_counter };\n        self.nullifier_non_existent_read_requests.push(request);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        let message = L2ToL1Message { recipient, content };\n        self.new_l2_to_l1_msgs.push(message);\n    }\n\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            this,\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<ARGS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<ARGS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let side_effect_counter = self.side_effect_counter;\n        // TODO get next value from output of `call_public_function_internal`\n        self.side_effect_counter += 1;\n\n        call_public_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        )\n    }\n}\n","path":"/Users/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr"},"74":{"source":"use crate::{\n    context::{inputs::PrivateContextInputs, interface::ContextInterface},\n    key::nullifier_key::validate_nullifier_key_against_address, messaging::process_l1_to_l2_message,\n    oracle::{\n    arguments, call_private_function::call_private_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal, context::get_portal_address,\n    header::get_header_at, nullifier_key::{get_nullifier_key_pair, NullifierKeyPair},\n    debug_log::debug_log\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    call_context::CallContext, function_data::FunctionData, function_selector::FunctionSelector,\n    nullifier_key_validation_request::NullifierKeyValidationRequest,\n    private_call_stack_item::PrivateCallStackItem,\n    private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem,\n    public_circuit_public_inputs::PublicCircuitPublicInputs, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NEW_NOTE_HASHES_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL, NUM_FIELDS_PER_SHA256, RETURN_VALUES_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    grumpkin_private_key::GrumpkinPrivateKey, hash::hash_args, header::Header,\n    messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader, traits::is_empty\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    note_hash_read_requests: BoundedVec<SideEffect, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    nullifier_key_validation_requests: BoundedVec<NullifierKeyValidationRequest, MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    new_note_hashes: BoundedVec<SideEffect, MAX_NEW_NOTE_HASHES_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack_hashes : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack_hashes : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n\n    nullifier_key: Option<NullifierKeyPair>,\n}\n\nimpl ContextInterface for PrivateContext {\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.new_note_hashes.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash { value: nullifier, note_hash: nullified_commitment, counter: self.side_effect_counter };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        let side_effect_counter = inputs.start_side_effect_counter;\n        let mut min_revertible_side_effect_counter = 0;\n        if is_empty(inputs.call_context.msg_sender) {\n            min_revertible_side_effect_counter = side_effect_counter;\n        }\n        PrivateContext {\n            inputs,\n            side_effect_counter,\n            min_revertible_side_effect_counter,\n            args_hash,\n            return_values: BoundedVec::new(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            nullifier_key_validation_requests: BoundedVec::new(),\n            new_note_hashes: BoundedVec::new(),\n            new_nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_stack_hashes: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            new_l2_to_l1_msgs: BoundedVec::new(),\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n            nullifier_key: Option::none()\n        }\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            nullifier_key_validation_requests: self.nullifier_key_validation_requests.storage,\n            new_note_hashes: self.new_note_hashes.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            private_call_stack_hashes: self.private_call_stack_hashes.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            encrypted_logs_hash,\n            unencrypted_logs_hash,\n            encrypted_log_preimages_length,\n            unencrypted_log_preimages_length,\n            historical_header: self.historical_header,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn capture_min_revertible_side_effect_counter(&mut self) {\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.note_hash_read_requests.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.side_effect_counter };\n        self.nullifier_read_requests.push(request);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn request_nullifier_secret_key(&mut self, account: AztecAddress) -> GrumpkinPrivateKey {\n        let key_pair = if self.nullifier_key.is_none() {\n            let key_pair = get_nullifier_key_pair(account);\n            validate_nullifier_key_against_address(account, key_pair.public_key);\n            let request = NullifierKeyValidationRequest { public_key: key_pair.public_key, secret_key: key_pair.secret_key };\n            self.nullifier_key_validation_requests.push(request);\n            self.nullifier_key = Option::some(key_pair);\n            key_pair\n        } else {\n            let key_pair = self.nullifier_key.unwrap_unchecked();\n            // If MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL is larger than 1, need to update the way the key pair is cached.\n            assert(MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL == 1);\n            assert(\n                key_pair.account == account, \"Cannot query nullifier key for more than one account per call\"\n            );\n            key_pair\n        };\n        key_pair.secret_key\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content };\n        self.new_l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let item = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        assert_eq(item.public_inputs.call_context.side_effect_counter, self.side_effect_counter);\n        assert_eq(item.public_inputs.start_side_effect_counter, self.side_effect_counter);\n        self.side_effect_counter = item.public_inputs.end_side_effect_counter + 1;\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n\n        self.private_call_stack_hashes.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let fields = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let mut reader = Reader::new(fields);\n\n        // Note: Not using PublicCirclePublicInputs::deserialize here, because everything below args_hash is 0 and\n        // there is no more data in fields because there is only ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE fields!\n        let item = PublicCallStackItem {\n            contract_address: AztecAddress::from_field(reader.read()),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: reader.read_struct(CallContext::deserialize),\n                args_hash: reader.read(),\n                return_values: [0; RETURN_VALUES_LENGTH],\n                nullifier_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n                nullifier_non_existent_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL],\n                contract_storage_update_requests: [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_reads: [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_note_hashes: [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL],\n                new_nullifiers: [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs: [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                start_side_effect_counter: 0,\n                end_side_effect_counter: 0,\n                unencrypted_logs_hash: [0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                historical_header: Header::empty(),\n                prover_address: AztecAddress::zero(),\n                reverted: false\n            },\n            is_execution_request: true\n        };\n        reader.finish();\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert_eq(item.public_inputs.call_context.side_effect_counter, self.side_effect_counter);\n        // We increment the sideffect counter by one, to account for the call itself being a side effect.\n        self.side_effect_counter = self.side_effect_counter + 1;\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n\n        self.public_call_stack_hashes.push(item.hash());\n    }\n}\n","path":"/Users/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr"},"81":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, \n    address::AztecAddress, \n    constants::ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH\n};\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n","path":"/Users/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.0/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr"},"82":{"source":"#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n/// - Pack arguments will notify the simulator that these arguments will be used later at\n///   some point in the call. \n/// - When the external call is made later, the simulator will know what the values unpack to.\n/// - This oracle will not be required in public vm functions, as the vm will keep track of arguments \n///   itself.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n","path":"/Users/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.0/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr"},"84":{"source":"use dep::protocol_types::traits::{Deserialize, Serialize};\n\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(_storage_slot: Field, _number_of_elements: Field) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field) -> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<N>(storage_slot: Field) -> [Field; N] {\n    storage_read_oracle_wrapper(storage_slot)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(_storage_slot: Field, _values: [Field; N]) -> [Field; N] {}\n\nunconstrained pub fn storage_write<N>(storage_slot: Field, fields: [Field; N]) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}\n","path":"/Users/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.0/noir-projects/aztec-nr/aztec/src/oracle/storage.nr"},"86":{"source":"use dep::protocol_types::{address::AztecAddress, constants::NUM_FIELDS_PER_SHA256, grumpkin_point::GrumpkinPoint};\n\n// TODO: Should take encrypted data.\n#[oracle(emitEncryptedLog)]\nfn emit_encrypted_log_oracle<N>(\n    _contract_address: AztecAddress,\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _encryption_pub_key: GrumpkinPoint,\n    _preimage: [Field; N]\n) -> Field {}\n\nunconstrained pub fn emit_encrypted_log<N>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    encryption_pub_key: GrumpkinPoint,\n    preimage: [Field; N]\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    [\n        emit_encrypted_log_oracle(\n            contract_address,\n            storage_slot,\n            note_type_id,\n            encryption_pub_key,\n            preimage\n        ), 0\n    ]\n}\n\n#[oracle(emitUnencryptedLog)]\nfn emit_unencrypted_log_oracle<T>(\n    _contract_address: AztecAddress,\n    _event_selector: Field,\n    _message: T\n) -> Field {}\n\nunconstrained pub fn emit_unencrypted_log<T>(\n    contract_address: AztecAddress,\n    event_selector: Field,\n    message: T\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // https://github.com/AztecProtocol/aztec-packages/issues/885\n    [emit_unencrypted_log_oracle(contract_address, event_selector, message), 0]\n}\n","path":"/Users/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.0/noir-projects/aztec-nr/aztec/src/oracle/logs.nr"},"93":{"source":"use dep::protocol_types::{address::AztecAddress, contract_instance::ContractInstance, constants::CONTRACT_INSTANCE_LENGTH};\n\n#[oracle(getContractInstance)]\nfn get_contract_instance_oracle(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance = ContractInstance::deserialize(get_contract_instance_internal(address));\n    assert(instance.to_address().eq(address));\n    instance\n}\n","path":"/Users/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr"},"94":{"source":"use dep::protocol_types::{\n    abis::nullifier_leaf_preimage::{NullifierLeafPreimage, NULLIFIER_LEAF_PREIMAGE_LENGTH},\n    constants::NULLIFIER_TREE_HEIGHT, hash::pedersen_hash, utils::arr_copy_slice\n};\n\n// INDEX_LENGTH + NULLIFIER_LEAF_PREIMAGE_LENGTH + NULLIFIER_TREE_HEIGHT\nglobal NULLIFIER_MEMBERSHIP_WITNESS: Field = 24;\n\nstruct NullifierMembershipWitness {\n    index: Field,\n    leaf_preimage: NullifierLeafPreimage,\n    path: [Field; NULLIFIER_TREE_HEIGHT],\n}\n\nimpl NullifierMembershipWitness {\n    pub fn deserialize(fields: [Field; NULLIFIER_MEMBERSHIP_WITNESS]) -> Self {\n        let leaf_preimage_fields = arr_copy_slice(fields, [0; NULLIFIER_LEAF_PREIMAGE_LENGTH], 1);\n        Self {\n            index: fields[0],\n            leaf_preimage: NullifierLeafPreimage::deserialize(leaf_preimage_fields),\n            path: arr_copy_slice(\n                fields,\n                [0; NULLIFIER_TREE_HEIGHT],\n                1 + NULLIFIER_LEAF_PREIMAGE_LENGTH\n            )\n        }\n    }\n}\n\n#[oracle(getLowNullifierMembershipWitness)]\nfn get_low_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_low_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_low_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n\n#[oracle(getNullifierMembershipWitness)]\nfn get_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n","path":"/Users/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.0/noir-projects/aztec-nr/aztec/src/oracle/get_nullifier_membership_witness.nr"},"101":{"source":"mod globals;\nmod inputs;\n\nmod private_context;\nmod public_context;\nmod interface;\nmod avm;\n\nuse private_context::PrivateContext;\nuse interface::ContextInterface;\nuse public_context::PublicContext;\nuse avm::AVMContext;\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n    public_vm: Option<&mut AVMContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context { private: Option::some(context), public: Option::none(), public_vm: Option::none() }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context { public: Option::some(context), private: Option::none(), public_vm: Option::none() }\n    }\n\n    pub fn public_vm(context: &mut AVMContext) -> Context {\n        Context { public_vm: Option::some(context), public: Option::none(), private: Option::none() }\n    }\n\n    pub fn none() -> Context {\n        Context { public: Option::none(), private: Option::none(), public_vm: Option::none() }\n    }\n}\n","path":"/Users/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.0/noir-projects/aztec-nr/aztec/src/context.nr"},"108":{"source":"use dep::std::merkle::compute_merkle_root;\nuse dep::protocol_types::header::Header;\n\nuse crate::{\n    context::{PrivateContext, ContextInterface},\n    oracle::get_nullifier_membership_witness::get_nullifier_membership_witness,\n    note::{utils::compute_siloed_nullifier, note_interface::NoteInterface}\n};\n\nfn _nullifier_inclusion(nullifier: Field, header: Header) {\n    // 1) Get the membership witness of the nullifier\n    let witness = get_nullifier_membership_witness(header.global_variables.block_number as u32, nullifier);\n\n    // 2) Check that the witness we obtained matches the nullifier\n    assert(witness.leaf_preimage.nullifier == nullifier, \"Nullifier does not match value in witness\");\n\n    // 3) Compute the nullifier tree leaf\n    let nullifier_leaf = witness.leaf_preimage.hash();\n\n    // 4) Prove that the nullifier is in the nullifier tree\n    assert(\n        header.state.partial.nullifier_tree.root\n        == compute_merkle_root(nullifier_leaf, witness.index, witness.path), \"Proving nullifier inclusion failed\"\n    );\n    // --> Now we have traversed the trees all the way up to archive root and verified that the nullifier\n    //     was included in the nullifier tree.\n}\n\npub fn prove_nullifier_inclusion<TContext>(\n    nullifier: Field,\n    context: TContext\n) where TContext: ContextInterface {\n    _nullifier_inclusion(nullifier, context.get_header());\n}\n\npub fn prove_nullifier_inclusion_at(\n    nullifier: Field,\n    block_number: u32, // The block at which we'll prove that the nullifier exists in the nullifier tree\n    context: PrivateContext\n) {\n    let header = context.get_header_at(block_number);\n\n    _nullifier_inclusion(nullifier, header);\n}\n\npub fn prove_note_is_nullified<Note, N>(\n    note: Note,\n    context: &mut PrivateContext\n) where Note: NoteInterface<N> {\n    let nullifier = compute_siloed_nullifier(note, context);\n\n    _nullifier_inclusion(nullifier, context.historical_header);\n}\n\npub fn prove_note_is_nullified_at<Note, N>(\n    note: Note,\n    block_number: u32,\n    context: &mut PrivateContext\n) where Note: NoteInterface<N> {\n    let nullifier = compute_siloed_nullifier(note, context);\n    let header = context.get_header_at(block_number);\n\n    _nullifier_inclusion(nullifier, header);\n}\n","path":"/Users/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.0/noir-projects/aztec-nr/aztec/src/history/nullifier_inclusion.nr"},"109":{"source":"use dep::protocol_types::{\n    hash::{silo_nullifier, pedersen_hash},\n    constants::GENERATOR_INDEX__CONSTRUCTOR,\n    abis::function_selector::FunctionSelector,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext, ContextInterface},\n    oracle::get_contract_instance::get_contract_instance,\n    history::nullifier_inclusion::prove_nullifier_inclusion,\n};\n\npub fn mark_as_initialized<TContext>(context: &mut TContext) where TContext: ContextInterface {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(*context);\n    ContextInterface::push_new_nullifier(context, init_nullifier, 0);\n}\n\npub fn assert_is_initialized<TContext>(context: &mut TContext) where TContext: ContextInterface {\n    let init_nullifier = compute_contract_initialization_nullifier(*context);\n    prove_nullifier_inclusion(init_nullifier, *context);\n}\n\npub fn compute_contract_initialization_nullifier<TContext>(context: TContext) -> Field where TContext: ContextInterface {\n    let address = context.this_address();\n    silo_nullifier(\n        address,\n        compute_unsiloed_contract_initialization_nullifier(context)\n    )\n}\n\npub fn compute_unsiloed_contract_initialization_nullifier<TContext>(context: TContext) -> Field where TContext: ContextInterface {\n    context.this_address().to_field()\n}\n\npub fn assert_initialization_matches_address_preimage<TContext>(context: TContext) where TContext: ContextInterface {\n    let address = context.this_address(); \n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert((instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\");\n}\n\npub fn compute_initialization_hash(init_selector: FunctionSelector, init_args_hash: Field) -> Field {\n    pedersen_hash([init_selector.to_field(), init_args_hash], GENERATOR_INDEX__CONSTRUCTOR)\n}","path":"/Users/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.0/noir-projects/aztec-nr/aztec/src/initializer.nr"},"116":{"source":"use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::protocol_types::{hash::pedersen_hash, traits::{ToField}};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\nstruct Map<K, V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T> Storage<T> for Map<K, T> {}\n\nimpl<K, V> Map<K, V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = pedersen_hash([self.storage_slot, key.to_field()], 0);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n","path":"/Users/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr"},"118":{"source":"use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse dep::protocol_types::traits::{Deserialize, Serialize};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:public_mutable_struct\nstruct PublicMutable<T> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T> Storage<T> for PublicMutable<T> {}\n\nimpl<T> PublicMutable<T> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n\n    // docs:start:public_mutable_struct_read\n    pub fn read<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"PublicMutable reads only supported in public functions\");\n        let fields = storage_read(self.storage_slot);\n        T::deserialize(fields)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write<T_SERIALIZED_LEN>(self, value: T) where T: Serialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"PublicMutable writes only supported in public functions\");\n        let fields = T::serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_mutable_struct_write\n}\n","path":"/Users/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.0/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr"},"123":{"source":"use dep::protocol_types::{hash::hash_args, traits::Hash};\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hash for Hasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl Hasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n","path":"/Users/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.0/noir-projects/aztec-nr/aztec/src/hasher.nr"},"136":{"source":"use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress},\n    constants::{CALL_CONTEXT_LENGTH, GENERATOR_INDEX__CALL_CONTEXT}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize}, abis::side_effect::Ordered\n};\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : AztecAddress,\n    storage_contract_address : AztecAddress,\n    portal_contract_address : EthAddress,\n\n    function_selector : FunctionSelector,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n\n    side_effect_counter : u32,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn assert_is_zero(self) {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3595)\n        assert(self.msg_sender.to_field() == 0);\n        assert(self.storage_contract_address.to_field() == 0);\n        assert(self.portal_contract_address.to_field() == 0);\n        assert(self.function_selector.to_field() == 0);\n        assert(self.is_delegate_call == false);\n        assert(self.is_static_call == false);\n        assert(self.side_effect_counter == 0);\n    }\n}\n\nimpl Eq for CallContext {\n    fn eq(self, call_context: CallContext) -> bool {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3595)\n        call_context.msg_sender.eq(self.msg_sender)\n            & call_context.storage_contract_address.eq(self.storage_contract_address)\n            & call_context.portal_contract_address.eq(self.portal_contract_address)\n            & call_context.function_selector.eq(self.function_selector)\n            & (call_context.is_delegate_call == self.is_delegate_call)\n            & (call_context.is_static_call == self.is_static_call)\n            & (call_context.side_effect_counter == self.side_effect_counter)\n    }\n}\n\nimpl Hash for CallContext {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\nimpl Serialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender.to_field(),\n            self.storage_contract_address.to_field(),\n            self.portal_contract_address.to_field(),\n            self.function_selector.to_field(),\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.side_effect_counter as Field,\n        ]\n    }\n}\n\nimpl Deserialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn deserialize(serialized: [Field; CALL_CONTEXT_LENGTH]) -> CallContext {\n        CallContext {\n            msg_sender: AztecAddress::from_field(serialized[0]),\n            storage_contract_address: AztecAddress::from_field(serialized[1]),\n            portal_contract_address: EthAddress::from_field(serialized[2]),\n            function_selector: FunctionSelector::from_field(serialized[3]),\n            is_delegate_call: serialized[4] as bool,\n            is_static_call: serialized[5] as bool,\n            side_effect_counter: serialized[6] as u32,\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let context: CallContext = dep::std::unsafe::zeroed();\n    let serialized = context.serialize();\n    let deserialized = CallContext::deserialize(serialized);\n    assert(context.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let context: CallContext = dep::std::unsafe::zeroed();\n    let _hashed = context.hash();\n}\n","path":"/Users/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/call_context.nr"},"137":{"source":"use crate::{\n    abis::{\n    call_context::CallContext, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    address::AztecAddress,\n    constants::{\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL, MAX_NEW_NOTE_HASHES_PER_CALL,\n    MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, NUM_FIELDS_PER_SHA256, RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    hash::pedersen_hash, header::Header, messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Hash, Serialize, Deserialize}, utils::reader::Reader\n};\n\nstruct PublicCircuitPublicInputs{\n    call_context: CallContext,\n\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n\n    nullifier_read_requests: [ReadRequest; MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n    nullifier_non_existent_read_requests: [ReadRequest; MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL],\n    contract_storage_update_requests: [StorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_reads: [StorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n\n    // todo: add sideeffect ranges for the input to these hashes\n    public_call_stack_hashes: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_note_hashes: [SideEffect; MAX_NEW_NOTE_HASHES_PER_CALL],\n    new_nullifiers: [SideEffectLinkedToNoteHash; MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [L2ToL1Message; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n\n    start_side_effect_counter: u32,\n    end_side_effect_counter: u32,\n\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n\n    // Here so that the gas cost of this request can be measured by circuits, without actually needing to feed in the\n    // variable-length data.\n    unencrypted_log_preimages_length: Field,\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n\n    prover_address: AztecAddress,\n\n    reverted: bool,\n}\n\nimpl Eq for PublicCircuitPublicInputs {\n    fn eq(self, other: Self) -> bool {\n        self.serialize() == other.serialize()\n    }\n}\n\nimpl Serialize<PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PublicCircuitPublicInputs {\n    fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new();\n        fields.extend_from_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.extend_from_array(self.return_values);\n        for i in 0..MAX_NULLIFIER_READ_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.nullifier_read_requests[i].serialize());\n        }\n        for i in 0..MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.nullifier_non_existent_read_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.extend_from_array(self.contract_storage_reads[i].serialize());\n        }\n        fields.extend_from_array(self.public_call_stack_hashes);\n\n        for i in 0..MAX_NEW_NOTE_HASHES_PER_CALL {\n            fields.extend_from_array(self.new_note_hashes[i].serialize());\n        }\n        for i in 0..MAX_NEW_NULLIFIERS_PER_CALL {\n            fields.extend_from_array(self.new_nullifiers[i].serialize());\n        }\n        for i in 0..MAX_NEW_L2_TO_L1_MSGS_PER_CALL {\n            fields.extend_from_array(self.new_l2_to_l1_msgs[i].serialize());\n        }\n\n        fields.push(self.start_side_effect_counter as Field);\n        fields.push(self.end_side_effect_counter as Field);\n\n        fields.extend_from_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.extend_from_array(self.historical_header.serialize());\n        fields.push(self.prover_address.to_field());\n        fields.push(self.reverted as Field);\n        fields.storage\n    }\n}\n\nimpl Deserialize<PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PublicCircuitPublicInputs {\n    fn deserialize(serialized: [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n        let inputs = PublicCircuitPublicInputs {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            return_values: reader.read_array([0; RETURN_VALUES_LENGTH]),\n            nullifier_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL]),\n            nullifier_non_existent_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL]),\n            contract_storage_update_requests: reader.read_struct_array(StorageUpdateRequest::deserialize, [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL]),\n            contract_storage_reads: reader.read_struct_array(StorageRead::deserialize, [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL]),\n            public_call_stack_hashes: reader.read_array([0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL]),\n            new_note_hashes: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL]),\n            new_nullifiers: reader.read_struct_array(SideEffectLinkedToNoteHash::deserialize, [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL]),\n            new_l2_to_l1_msgs: reader.read_struct_array(L2ToL1Message::deserialize, [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL]),\n            start_side_effect_counter: reader.read() as u32,\n            end_side_effect_counter: reader.read() as u32,\n            unencrypted_logs_hash: reader.read_array([0; NUM_FIELDS_PER_SHA256]),\n            unencrypted_log_preimages_length: reader.read(),\n            historical_header: reader.read_struct(Header::deserialize),\n            prover_address: reader.read_struct(AztecAddress::deserialize),\n            reverted: reader.read() as bool,\n        };\n\n        reader.finish();\n        inputs\n    }\n}\n\nimpl Hash for PublicCircuitPublicInputs {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let pcpi: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let serialized = pcpi.serialize();\n    let deserialized = PublicCircuitPublicInputs::deserialize(serialized);\n    assert(pcpi.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let hash = inputs.hash();\n\n    // Value from public_circuit_public_inputs.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x083ac560a513d670a7f50f0a3052d42cb9816b7b643e62025b8278652ad637ab;\n    assert_eq(hash, test_data_empty_hash);\n}\n","path":"/Users/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/public_circuit_public_inputs.nr"},"147":{"source":"global NULLIFIER_LEAF_PREIMAGE_LENGTH: u64 = 3;\n\nuse crate::{merkle_tree::leaf_preimage::{LeafPreimage, IndexedTreeLeafPreimage}, traits::{Empty, Hash}};\n\nstruct NullifierLeafPreimage {\n    nullifier : Field,\n    next_nullifier :Field,\n    next_index : u64,\n}\n\nimpl Empty for NullifierLeafPreimage {\n    fn empty() -> Self {\n        Self {\n            nullifier : 0,\n            next_nullifier : 0,\n            next_index : 0,\n        }\n    }\n}\n\nimpl Hash for NullifierLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            dep::std::hash::pedersen_hash(self.serialize())\n        }\n    }\n}\n\nimpl LeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl NullifierLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.nullifier == 0) & (self.next_nullifier == 0) & (self.next_index == 0)\n    }\n\n    pub fn serialize(self) -> [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH] {\n        [self.nullifier, self.next_nullifier, self.next_index as Field]\n    }\n\n    pub fn deserialize(fields: [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH]) -> Self {\n        Self { nullifier: fields[0], next_nullifier: fields[1], next_index: fields[2] as u64 }\n    }\n}\n","path":"/Users/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/nullifier_leaf_preimage.nr"},"148":{"source":"use crate::abis::{function_data::FunctionData, public_circuit_public_inputs::PublicCircuitPublicInputs};\nuse crate::address::AztecAddress;\nuse crate::constants::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::traits::Hash;\n\nstruct PublicCallStackItem {\n    contract_address: AztecAddress,\n    public_inputs: PublicCircuitPublicInputs,\n    function_data: FunctionData,\n    // True if this call stack item represents a request to execute a function rather than a\n    // fulfilled execution. Used when enqueuing calls from private to public functions.\n    is_execution_request: bool,\n}\n\nimpl Hash for PublicCallStackItem {\n    fn hash(self) -> Field {\n        let item = if self.is_execution_request {\n            self.as_execution_request()\n        } else {\n            self\n        };\n\n        dep::std::hash::pedersen_hash_with_separator([\n            item.contract_address.to_field(),\n            item.function_data.hash(),\n            item.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\nimpl PublicCallStackItem {\n    fn as_execution_request(self) -> Self {\n        let public_inputs = self.public_inputs;\n        let mut request_public_inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n        request_public_inputs.call_context = public_inputs.call_context;\n        request_public_inputs.args_hash = public_inputs.args_hash;\n\n        let call_stack_item = PublicCallStackItem {\n            contract_address: self.contract_address,\n            function_data: self.function_data,\n            is_execution_request: true,\n            public_inputs: request_public_inputs\n        };\n        call_stack_item\n    }\n}\n\nmod tests {\n    use crate::{\n        abis::{\n        function_data::FunctionData, function_selector::FunctionSelector,\n        public_circuit_public_inputs::PublicCircuitPublicInputs,\n        public_call_stack_item::PublicCallStackItem, side_effect::SideEffect\n    },\n        address::AztecAddress, constants::GENERATOR_INDEX__CALL_STACK_ITEM, traits::Hash\n    };\n\n    #[test]\n    fn compute_call_stack_item_request_hash() {\n        let contract_address = AztecAddress::from_field(1);\n        let function_data = FunctionData { selector: FunctionSelector::from_u32(2), is_private: false };\n\n        let mut public_inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n        public_inputs.new_note_hashes[0] = SideEffect{\n            value: 1,\n            counter: 0,\n        };\n\n        let call_stack_item = PublicCallStackItem { contract_address, public_inputs, is_execution_request: true, function_data };\n\n        // Value from public_call_stack_item.test.ts \"Computes a callstack item request hash\" test\n        let test_data_call_stack_item_request_hash = 0x02e15f4157b5e2cb0a7ec3dfec18c6812ef16e1da319b364e5a11e337dfca414;\n        assert_eq(call_stack_item.hash(), test_data_call_stack_item_request_hash);\n    }\n\n    #[test]\n    fn compute_call_stack_item_hash() {\n        let contract_address = AztecAddress::from_field(1);\n        let function_data = FunctionData { selector: FunctionSelector::from_u32(2), is_private: false };\n\n        let mut public_inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n        public_inputs.new_note_hashes[0] = SideEffect{\n            value: 1,\n            counter: 0,\n        };\n\n        let call_stack_item = PublicCallStackItem { contract_address, public_inputs, is_execution_request: false, function_data };\n\n        // Value from public_call_stack_item.test.ts \"Computes a callstack item hash\" test\n        let test_data_call_stack_item_hash = 0x0f22ddeca80a2c6f455165f1d2d1950c5e1b772bdc312742d1de089b424f0f5f;\n        assert_eq(call_stack_item.hash(), test_data_call_stack_item_hash);\n    }\n}\n","path":"/Users/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/public_call_stack_item.nr"},"157":{"source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    constants::{GENERATOR_INDEX__FUNCTION_DATA, FUNCTION_DATA_LENGTH}, hash::pedersen_hash,\n    traits::{Serialize, Hash, Deserialize}\n};\n\nstruct FunctionData {\n    selector : FunctionSelector,\n    is_private : bool,\n}\n\nimpl Eq for FunctionData {\n    fn eq(self, other: Self) -> bool {\n        self.selector.eq(other.selector) &\n        self.is_private == other.is_private\n    }\n}\n\nimpl Serialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    // A field is ~256 bits\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3057): Since, function data can fit into a Field,\n    // This method will simply return a bit packed Field instead of hashing\n    fn serialize(self) -> [Field; FUNCTION_DATA_LENGTH] {\n        [\n            self.selector.to_field(),\n            self.is_private as Field,\n        ]\n    }\n}\n\nimpl Deserialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    fn deserialize(serialized: [Field; FUNCTION_DATA_LENGTH]) -> Self {\n        Self {\n            selector: FunctionSelector::from_field(serialized[0]),\n            is_private: serialized[1] as bool,\n        }\n    }\n}\n\nimpl Hash for FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let data: FunctionData = dep::std::unsafe::zeroed();\n    let serialized = data.serialize();\n    let deserialized = FunctionData::deserialize(serialized);\n    assert(data.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let data: FunctionData = dep::std::unsafe::zeroed();\n    let hash = data.hash();\n\n    // Value from function_data.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x27b1d0839a5b23baf12a8d195b18ac288fcf401afb2f70b8a4b529ede5fa9fed;\n    assert_eq(hash, test_data_empty_hash);\n}\n","path":"/Users/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_data.nr"},"161":{"source":"use crate::utils::field::field_from_bytes;\nuse dep::std::cmp::Eq;\nuse crate::traits::{Serialize, Deserialize, FromField, ToField};\n\nglobal SELECTOR_SIZE = 4;\n\nstruct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self {\n            inner: fields[0] as u32\n        }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<N>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = dep::std::hash::keccak256(bytes, bytes.len() as u32);\n\n        let mut selector_be_bytes = [0; SELECTOR_SIZE];\n        for i in 0..SELECTOR_SIZE {\n            selector_be_bytes[i] = hash[i];\n        }\n\n        FunctionSelector::from_field(field_from_bytes(selector_be_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n","path":"/Users/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr"},"201":{"source":"struct Reader<N> {\n    data: [Field; N],\n    offset: u64,\n}\n\nimpl<N> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_array<K>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, K>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, K, C>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n","path":"/Users/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr"},"205":{"source":"use dep::std::cmp::Eq;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic \n// if a value can actually be zero. In a future refactor, we can \n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\ntrait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field { fn empty() -> Self {0} }\n\nimpl Empty for u1 { fn empty() -> Self {0} }\nimpl Empty for u8 { fn empty() -> Self {0} }\nimpl Empty for u32 { fn empty() -> Self {0} }\nimpl Empty for u64 { fn empty() -> Self {0} }\nimpl Empty for U128 { fn empty() -> Self {U128::from_integer(0)} }\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, N>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\ntrait Hash {\n    fn hash(self) -> Field;\n}\n\ntrait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u1 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u8 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u32 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u64 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\n\ntrait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool { fn from_field(value: Field) -> Self { value as bool } }\nimpl FromField for u1 { fn from_field(value: Field) -> Self { value as u1 } }\nimpl FromField for u8 { fn from_field(value: Field) -> Self { value as u8 } }\nimpl FromField for u32 { fn from_field(value: Field) -> Self { value as u32 } }\nimpl FromField for u64 { fn from_field(value: Field) -> Self { value as u64 } }\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\ntrait Serialize<N> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\n// docs:start:deserialize\ntrait Deserialize<N> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n","path":"/Users/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr"},"206":{"source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: Field = 1;\nglobal U32_SERIALIZED_LEN: Field = 1;\nglobal U8_SERIALIZED_LEN: Field = 1;\nglobal FIELD_SERIALIZED_LEN: Field = 1;\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<1> for U128 {\n    fn serialize(self) -> [Field; 1] {\n        [self.to_integer()]\n    }\n\n}\n\nimpl Deserialize<1> for U128 {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n","path":"/Users/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr"},"210":{"source":"use crate::{\n    address::{\n    aztec_address::AztecAddress, eth_address::EthAddress, partial_address::PartialAddress,\n    public_keys_hash::PublicKeysHash\n},\n    contract_class_id::ContractClassId,\n    constants::{GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA, CONTRACT_INSTANCE_LENGTH},\n    traits::{Deserialize, Hash, Serialize}\n};\n\nstruct ContractInstance {\n    salt : Field,\n    deployer: AztecAddress,\n    contract_class_id : ContractClassId,\n    initialization_hash : Field,\n    portal_contract_address : EthAddress,\n    public_keys_hash : PublicKeysHash,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys_hash.eq(other.public_keys_hash) &\n        self.initialization_hash.eq(other.initialization_hash) &\n        self.contract_class_id.eq(other.contract_class_id) &\n        self.salt.eq(other.salt) &\n        self.portal_contract_address.eq(other.portal_contract_address)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            self.portal_contract_address.to_field(),\n            self.public_keys_hash.to_field()\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            portal_contract_address: EthAddress::from_field(serialized[4]),\n            public_keys_hash: PublicKeysHash::from_field(serialized[5]),\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys_hash,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.portal_contract_address,\n                self.deployer\n            )\n        )\n    }\n}\n","path":"/Users/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.0/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr"},"211":{"source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: u64) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n","path":"/Users/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.0/noir-projects/noir-protocol-circuits/crates/types/src/utils.nr"},"212":{"source":"use crate::{\n    crate::address::{eth_address::EthAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS},\n    contract_class_id::ContractClassId, hash::pedersen_hash, grumpkin_point::GrumpkinPoint,\n    traits::{Empty, ToField, Serialize, Deserialize}, utils\n};\n\n// Aztec address\nstruct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        AztecAddress::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute_from_public_key(\n        pub_key: GrumpkinPoint,\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        portal_contract_address: EthAddress,\n        deployer: AztecAddress\n    ) -> AztecAddress {\n        AztecAddress::compute(\n            PublicKeysHash::compute(pub_key),\n            PartialAddress::compute(\n                contract_class_id,\n                salt,\n                initialization_hash,\n                portal_contract_address,\n                deployer\n            )\n        )\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            pedersen_hash(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address() {\n    let point = GrumpkinPoint { x: 1, y: 2 };\n    let contract_address_salt = 3;\n    let contract_class_id = ContractClassId::from_field(4);\n    let initialization_hash = 5;\n    let portal_contract_address = EthAddress::from_field(6);\n    let deployer = AztecAddress::from_field(7);\n\n    let address = AztecAddress::compute_from_public_key(\n        point,\n        contract_class_id,\n        contract_address_salt,\n        initialization_hash,\n        portal_contract_address,\n        deployer\n    );\n\n    let expected_computed_address_from_preimage = 0x027ea2b41ced2ec9a98305984e96dd28518536a4628883ccdc06e38aa8997220;\n    assert(address.to_field() == expected_computed_address_from_preimage);\n}\n\n#[test]\nfn compute_address_from_partial_and_pubkey() {\n    let point = GrumpkinPoint { x: 1, y: 2 };\n    let partial_address = PartialAddress::from_field(3);\n\n    let address = AztecAddress::compute(PublicKeysHash::compute(point), partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x0447f893197175723deb223696e2e96dbba1e707ee8507766373558877e74197;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n","path":"/Users/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr"},"214":{"source":"use crate::{\n    address::{eth_address::EthAddress, aztec_address::AztecAddress},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, hash::pedersen_hash, traits::ToField\n};\n\n// Salted initialization hash. Used in the computation of a partial address.\nstruct SaltedInitializationHash {\n    inner: Field\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        salt: Field,\n        initialization_hash: Field,\n        portal_contract_address: EthAddress,\n        deployer: AztecAddress\n    ) -> Self {\n        SaltedInitializationHash::from_field(\n            pedersen_hash(\n                [\n            salt,\n            initialization_hash,\n            deployer.to_field(),\n            portal_contract_address.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n","path":"/Users/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.0/noir-projects/noir-protocol-circuits/crates/types/src/address/salted_initialization_hash.nr"},"215":{"source":"use crate::{\n    address::{\n    eth_address::EthAddress, salted_initialization_hash::SaltedInitializationHash,\n    aztec_address::AztecAddress\n},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, contract_class_id::ContractClassId,\n    hash::pedersen_hash, traits::ToField\n};\n\n// Partial address\nstruct PartialAddress {\n    inner : Field\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        portal_contract_address: EthAddress,\n        deployer: AztecAddress\n    ) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            SaltedInitializationHash::compute(salt, initialization_hash, portal_contract_address, deployer)\n        )\n    }\n\n    pub fn compute_from_salted_initialization_hash(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash\n    ) -> Self {\n        PartialAddress::from_field(\n            pedersen_hash(\n                [\n            contract_class_id.to_field(),\n            salted_initialization_hash.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n","path":"/Users/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.0/noir-projects/noir-protocol-circuits/crates/types/src/address/partial_address.nr"},"216":{"source":"use crate::{\n    constants::ETH_ADDRESS_LENGTH, hash::pedersen_hash,\n    traits::{Empty, ToField, Serialize, Deserialize}, utils\n};\n\nstruct EthAddress{\n    inner : Field\n}\n\nimpl Eq for EthAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn serialize(self: Self) -> [Field; ETH_ADDRESS_LENGTH] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn deserialize(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\n        EthAddress::from_field(fields[0])\n    }\n}\n\nimpl EthAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        field.assert_max_bit_size(160);\n        Self { inner: field }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n","path":"/Users/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.0/noir-projects/noir-protocol-circuits/crates/types/src/address/eth_address.nr"},"217":{"source":"use crate::address::{AztecAddress, EthAddress};\nuse crate::mocked::VerificationKey;\nuse crate::abis::function_selector::FunctionSelector;\nuse crate::abis::contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage;\nuse crate::contract_class_id::ContractClassId;\nuse crate::abis::side_effect::{SideEffect};\nuse crate::utils::uint256::U256;\nuse crate::constants::{\n    ARGS_HASH_CHUNK_COUNT, ARGS_HASH_CHUNK_LENGTH, FUNCTION_TREE_HEIGHT, NUM_FIELDS_PER_SHA256,\n    GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER, GENERATOR_INDEX__VK,\n    GENERATOR_INDEX__CONSTRUCTOR, GENERATOR_INDEX__PARTIAL_ADDRESS, GENERATOR_INDEX__CONTRACT_ADDRESS,\n    GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH, GENERATOR_INDEX__FUNCTION_ARGS\n};\nuse crate::messaging::l2_to_l1_message::L2ToL1Message;\nuse crate::merkle_tree::root::root_from_sibling_path;\n\nuse dep::std::hash::{pedersen_hash_with_separator, sha256};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (sha256_hashed[15 - i] as Field) * v;\n        low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    let hash_in_a_field = low + high * v;\n\n    hash_in_a_field\n}\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < args.len() {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < args.len() {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\npub fn silo_note_hash(address: AztecAddress, inner_commitment: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        inner_commitment\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\npub fn silo_nullifier(address: AztecAddress, nullifier: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    pedersen_hash([left, right], 0)\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    rollup_version_id: Field,\n    chain_id: Field,\n    message: L2ToL1Message\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [\n        contract_address.to_field(), rollup_version_id, message.recipient.to_field(), chain_id, message.content\n    ];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes = inputs[i].to_be_bytes(32);\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\n// Computes sha256 hash of 2 input hashes stored in 4 fields.\n// \n// This method is bn254 specific. Two fields is needed in order to \n// encode the sha256 output. It can be abstracted away with any 4-2 hash function.\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\n// Returning a Field would be desirable because then this can be replaced with \n// poseidon without changing the rest of the code\n//\npub fn accumulate_sha256(input: [U128; 4]) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually \n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field \n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    //\n    // Concatenate 4 u128 bit integers into a byte array.\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..4 {\n        let input_as_bytes = input[offset].to_be_bytes();\n        for byte_index in 0..16 {\n            hash_input_flattened[offset * 16 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    let sha_digest = dep::std::hash::sha256(hash_input_flattened);\n\n    U256::from_bytes32(sha_digest).to_u128_limbs()\n}\n\npub fn compute_logs_hash(\n    previous_log_hash: [Field; 2],\n    current_log_hash: [Field; 2]\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    accumulate_sha256(\n        [\n        U128::from_integer(previous_log_hash[0]),\n        U128::from_integer(previous_log_hash[1]),\n        U128::from_integer(current_log_hash[0]),\n        U128::from_integer(current_log_hash[1])\n    ]\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier: Field, commitment_index: u64) -> Field {\n    pedersen_hash(\n        [\n        first_nullifier,\n        commitment_index as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_siloed_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    pedersen_hash(\n        [\n        nonce,\n        siloed_note_hash\n    ],\n        GENERATOR_INDEX__UNIQUE_NOTE_HASH\n    )\n}\n\npub fn compute_unique_siloed_note_hashes<N>(\n    first_nullifier: Field,\n    siloed_note_hashes: [SideEffect; N]\n) -> [SideEffect; N] {\n    let mut unique_siloed_note_hashes = [SideEffect::empty(); N];\n    for i in 0..N {\n        let siloed_note_hash = siloed_note_hashes[i];\n        if siloed_note_hash.value != 0 {\n            let nonce = compute_note_hash_nonce(first_nullifier, i);\n            unique_siloed_note_hashes[i] = SideEffect {\n                value: compute_unique_siloed_note_hash(nonce, siloed_note_hash.value),\n                counter: siloed_note_hash.counter\n                };\n        }\n    }\n    unique_siloed_note_hashes\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    dep::std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n    assert(result == 0x142a6d57007171f6eaa33d55976d9dbe739c889c8e920f115f7808dea184c718);\n}\n\n#[test]\nfn compute_var_args_hash() {\n    let mut input = [0; 800];\n    for i in 0..800 {\n        input[i] = i as Field;\n    }\n    let hash = hash_args(input);\n    assert(hash == 0x371960dd84ed3445ab099ac4c1af5ba90e0c713b593e0ca52ee532087c7f097);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), 0, 0, L2ToL1Message::empty());\n    assert(hash_result == 0x2266ac2f9f0c19c015239ef5ea85862fc6fac00db73779b220a4d49c4856c2e1);\n\n    // Non-zero case\n    let message = L2ToL1Message { recipient: EthAddress::from_field(3), content: 5 };\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), 2, 4, message);\n    assert(hash_result == 0x0f24729168d4450a5681beafa5e3a899ac28bd17bf5a4877dab37bcd834e1634);\n}\n","path":"/Users/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.30.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr"},"228":{"source":"use dep::std::hash;\nuse dep::aztec::oracle::debug_log;\n\nfn compute_merkle_root<DEPTH>(leaf_index: Field, leaf_value: bool, siblings: [Field; DEPTH]) -> Field {\n    // TODO: Assert leaf_index < 2^DEPTH\n    let index_bits = leaf_index.to_le_bits(DEPTH as u32);\n    let mut current = leaf_value as Field;\n    for i in 0..DEPTH {\n        let path_bit = index_bits[i] as bool;\n        let (hash_left, hash_right) = if path_bit {\n            (siblings[i], current)\n        } else {\n            (current, siblings[i])\n        };\n        current = hash::pedersen_hash([hash_left, hash_right]);\n    }\n    current\n}\n\n// Verifies non-membership\npub fn verify<DEPTH>(leaf_index: Field, root: Field, siblings: [Field; DEPTH]) -> bool {\n    root == compute_merkle_root(leaf_index, false, siblings)\n}\n\npub fn insert<DEPTH>(leaf_index: Field, old_root: Field, siblings: [Field; DEPTH]) -> Field {\n    assert(\n        old_root == compute_merkle_root(leaf_index, false, siblings), \"old_root is incorrect or already exists\"\n    );\n    compute_merkle_root(leaf_index, true, siblings)\n}\n\npub fn remove<DEPTH>(leaf_index: Field, old_root: Field, siblings: [Field; DEPTH]) -> Field {\n    assert(\n        old_root == compute_merkle_root(leaf_index, true, siblings), \"old_root is incorrect or doesn't exist\"\n    );\n    compute_merkle_root(leaf_index, false, siblings)\n}\n\n#[test]\nfn test_depth1_empty() {\n    assert(\n        compute_merkle_root(0, false, [0])\n        == 0x27b1d0839a5b23baf12a8d195b18ac288fcf401afb2f70b8a4b529ede5fa9fed\n    );\n}\n\n#[test]\nfn test_depth1_left() {\n    assert(\n        compute_merkle_root(0, true, [0])\n        == 0x2e8c6083fb43bef89fa5ee406f0bb9bd3d43780e02991ec42623d35d5657a808\n    );\n}\n\n#[test]\nfn test_depth1_right() {\n    assert(\n        compute_merkle_root(1, true, [0])\n        == 0xd98561fb02ca04d00801dfdc118b2a24cea0351963587712a28d368041370e1\n    );\n}\n","path":"/Users/ayush/projects/aztec-ws/aztec-token-partition-table/src/contracts/common_types/src/smt.nr"}}}