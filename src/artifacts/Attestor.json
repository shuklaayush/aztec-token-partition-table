{
  "name": "Attestor",
  "functions": [
    {
      "name": "_is_blacklisted",
      "functionType": "open",
      "isInternal": true,
      "parameters": [
        {
          "name": "token_address",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "shield_id",
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_header",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::BlockHeader",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "archive_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "add_to_blacklist",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "token_address",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "shield_id",
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_header",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::BlockHeader",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "archive_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "admin",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "field"
        }
      ],
      "bytecode": "H4sIAAAAAAAA/8VUSQ7CMAx00iwEJL7AnVP5Qd/ADypRcUQC/i8IZNTBqnppKnyJ6yQzztiuEREjX2tkNKP8Y/EDxbuytgstEF8tTP/G8AUrUc62rPvyFluX97Sb0DCQtrV4uD6MK8SV5LeOiDVKi0Q+9rJ2B9r3E3fCBB/fR8zJqIO+yxp59ZZ2mX00Yp6OvsG1VTmsmQt0AK5TufyTN9blbTPGhnjRF5F0Bz/OJfK5f6w6F2WdmQoy9kAtTO5/2NzsrtmDWT/8nx7P272/DuehvxhKy6kULaXGPo88SuooNlfGSDHgcGm1PNXer3GNWrO9APM4bgIQBwAA",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "compute_note_hash_and_nullifier",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "contract_address",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "storage_slot",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "serialized_note",
          "type": {
            "kind": "array",
            "length": 11,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "field"
          }
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "constructor",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "admin",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_header",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::BlockHeader",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "archive_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "is_blacklisted",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "token_address",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "shield_id",
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_header",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::BlockHeader",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "archive_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "events": [],
  "debug": {
    "debugSymbols": [
      "",
      "",
      "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KIXTbTF87CiF020xgOwohdNtMYTsKIXTbTGI7CiF020xjOwohdNtMZDsKIXTbTGU7CgF022FY8mEY8mEY8mEY8lkw3Rb4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy4Vgy5Vgy5Vgy5Vgy5Vgy3TDdVjmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWTDmWzDiWzDiWzDiWzDiWzDZMtzWOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOOJTOO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",
      "",
      ""
    ],
    "fileMap": {
      "1": {
        "source": "// TODO: Attestor contract\n//       The Attestor contract tracks blacklisted deposit IDs. \n//       Attestations are dispensed if a note’s partition table does not intersect with the blacklist.\n//\n//       The blacklist must be accessible from private functions. A possible solution is to store the blacklist as an indexed merkle tree. \n//       Race conditions that arise from updating the tree can be deferred and considered out-of-scope for the MPV.\n//\n//       The request_attestation method requires a set-non-intersection check that is of independent interest and should be implemented as a 3rd party library.\n\nmod types;\nmod utils;\n\ncontract Attestor {\n    ////////////////////////////////////////////////////////////////////////////////\n    // IMPORTS\n    ////////////////////////////////////////////////////////////////////////////////\n\n    use dep::aztec::{\n        context::{PrivateContext, PublicContext, Context},\n        note::{\n            note_header::NoteHeader,\n            utils as note_utils\n        },\n        selector::compute_selector,\n        state_vars::{map::Map, singleton::Singleton ,public_state::PublicState},\n        types::type_serialization::{\n            aztec_address_serialization::{AztecAddressSerializationMethods, AZTEC_ADDRESS_SERIALIZED_LEN},\n        },\n        types::address::AztecAddress,\n    };\n\n    use crate::types::blacklist_note::{BlacklistNote, BlacklistNoteMethods, BLACKLIST_NOTE_LEN};\n    use crate::utils::{MAX_SHIELD_IDS_LEN, contains};\n\n    ////////////////////////////////////////////////////////////////////////////////\n    // STORAGE\n    ////////////////////////////////////////////////////////////////////////////////\n\n    struct Storage {\n        admin: PublicState<AztecAddress, AZTEC_ADDRESS_SERIALIZED_LEN>,\n        // TODO: blacklist_of?\n        blacklisted: Map<Singleton<BlacklistNote, BLACKLIST_NOTE_LEN>>,\n    }\n\n    impl Storage {\n        fn init(context: Context) -> Self {\n            Storage {\n                admin: PublicState::new(\n                    context,\n                    1,\n                    AztecAddressSerializationMethods,\n                ),\n                // Token address -> BlacklistNote\n                blacklisted: Map::new(\n                    context,\n                    2,\n                    |context, slot| {\n                        Singleton::new(context, slot, BlacklistNoteMethods)\n                    },\n                ),\n            }\n        }\n    }\n\n    ////////////////////////////////////////////////////////////////////////////////\n    // CONSTRUCTOR\n    ////////////////////////////////////////////////////////////////////////////////\n\n    // TODO: Make private?\n    #[aztec(public)]\n    fn constructor(admin: AztecAddress) {\n        storage.admin.write(admin);\n    }\n\n    ////////////////////////////////////////////////////////////////////////////////\n    // PUBLIC\n    ////////////////////////////////////////////////////////////////////////////////\n\n    #[aztec(public)]\n    pub fn add_to_blacklist(token_address: AztecAddress, shield_id: u32) {\n        assert(storage.admin.read().eq(AztecAddress::new(context.msg_sender())), \"caller is not admin\");\n\n        let mut blacklist_note = storage.blacklisted.at(token_address.address).get_note(false);\n        blacklist_note.shield_ids[blacklist_note.count] = shield_id;\n        blacklist_note.count += 1;\n\n        storage.blacklisted.at(token_address.address).replace(&mut blacklist_note, true);\n    }\n\n    // TODO\n    // #[aztec(public)]\n    // pub fn remove_from_blacklist(token_address: AztecAddress, shield_id: u32) {\n    //     storage.blacklisted.at(shield_id as Field).write(false);\n    // }\n\n    #[aztec(public)]\n    pub fn is_blacklisted(token_address: AztecAddress, shield_id: u32) {\n        let selector = compute_selector(\"_is_blacklisted((Field),u32)\");\n        let return_values = context.call_public_function(context.this_address(), selector, [token_address.address, shield_id as Field]);\n        return_values[0] as bool\n    }\n\n    ////////////////////////////////////////////////////////////////////////////////\n    // PRIVATE\n    ////////////////////////////////////////////////////////////////////////////////\n\n    // #[aztec(private)]\n    // fn request_attestation(partition_table: [u32; MAX_SHIELD_IDS_LEN]) -> bool {\n    //     let token_address = AztecAddress::new(context.msg_sender());\n    //     let selector = compute_selector(\"_is_blacklisted((Field),u32)\");\n    //     // TODO: Use merkle tree intersection/non-intersection check\n    //     let mut res = true;\n    //     for i in 0..partition_table.len() {\n    //         if context.call_public_function(context.this_address(), selector, [token_address, partition_table[i] as Field]) {\n    //             res = false;\n    //         }\n    //     }\n    //     res\n    // }\n    \n    ////////////////////////////////////////////////////////////////////////////////\n    // INTERNAL\n    ////////////////////////////////////////////////////////////////////////////////\n\n    #[aztec(public)]\n    internal fn _is_blacklisted(token_address: AztecAddress, shield_id: u32) -> bool {\n        let mut res = false;\n        let blacklist_note = storage.blacklisted.at(token_address.address).get_note(false);\n        if contains(blacklist_note.shield_ids, shield_id) {\n            res = true;\n        }\n        res\n    }\n\n    ////////////////////////////////////////////////////////////////////////////////\n    // UNCONSTRAINED\n    ////////////////////////////////////////////////////////////////////////////////\n\n    unconstrained fn admin() -> Field {\n        storage.admin.read().address\n    }\n\n    // TODO \n    unconstrained fn compute_note_hash_and_nullifier(\n        contract_address: Field,\n        nonce: Field,\n        storage_slot: Field,\n        serialized_note: [Field; BLACKLIST_NOTE_LEN]\n    ) -> [Field; 4] {\n        let note_header = NoteHeader::new(contract_address, nonce, storage_slot);\n        note_utils::compute_note_hash_and_nullifier(BlacklistNoteMethods, note_header, serialized_note)\n    }\n}\n",
        "path": "/Users/ayush/projects/aztec-ws/aztec-token-partition-table/src/contracts/attestor/src/main.nr"
      },
      "36": {
        "source": "struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n",
        "path": "std/option.nr"
      },
      "78": {
        "source": "global ARGS_LENGTH: Field = 16;\nglobal RETURN_VALUES_LENGTH: Field = 4;\n\n/**\n * Convention for constant array lengths are mainly divided in 2 classes:\n *  - FUNCTION CALL\n *  - TRANSACTION\n *\n * Agreed convention is to use MAX_XXX_PER_CALL resp. MAX_XXX_PER_TX, where XXX denotes a type of element such as\n * commitment, or nullifier, e.g.,:\n *  - MAX_NEW_NULLIFIERS_PER_CALL\n *  - MAX_NEW_COMMITMENTS_PER_TX\n *\n * In the kernel circuits, we accumulate elements such as commitments and the nullifiers from all functions calls in a\n * transaction. Therefore, we always must have:\n * MAX_XXX_PER_TX ≥ MAX_XXX_PER_CALL\n *\n * For instance:\n * MAX_NEW_COMMITMENTS_PER_TX ≥ MAX_NEW_COMMITMENTS_PER_CALL\n * MAX_NEW_NULLIFIERS_PER_TX ≥ MAX_NEW_NULLIFIERS_PER_CALL\n *\n */\n\n// docs:start:constants\n// \"PER CALL\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_CALL: Field = 16;\nglobal MAX_NEW_NULLIFIERS_PER_CALL: Field = 16;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_CALL: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_CALL: Field = 16;\nglobal MAX_READ_REQUESTS_PER_CALL: Field = 32;\nglobal MAX_PENDING_READ_REQUESTS_PER_CALL: Field = 32;\n\n// \"PER TRANSACTION\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_TX: Field = 64;\nglobal MAX_NEW_NULLIFIERS_PER_TX: Field = 64;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_TX: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_TX: Field = 16;\nglobal MAX_NEW_CONTRACTS_PER_TX: Field = 1;\nglobal MAX_OPTIONALLY_REVEALED_DATA_LENGTH_PER_TX: Field = 4;\nglobal MAX_READ_REQUESTS_PER_TX: Field = 128;\nglobal MAX_PENDING_READ_REQUESTS_PER_TX: Field = 128;\nglobal NUM_ENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\nglobal NUM_UNENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\n// docs:end:constants\n\n// ROLLUP CONTRACT CONSTANTS - constants used only in l1-contracts\nglobal NUMBER_OF_L1_L2_MESSAGES_PER_ROLLUP: Field = 16;\n// TODO(961): Use this constant everywhere instead of hard-coded \"2\".\nglobal KERNELS_PER_BASE_ROLLUP: Field = 2;\nglobal MAX_NEW_NULLIFIERS_PER_BASE_ROLLUP: Field = 128;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_BASE_ROLLUP: Field = 32;\nglobal MAX_PUBLIC_DATA_READS_PER_BASE_ROLLUP: Field = 32;\n\n// TREES RELATED CONSTANTS\nglobal VK_TREE_HEIGHT: Field = 3;\nglobal FUNCTION_TREE_HEIGHT: Field = 5;\nglobal CONTRACT_TREE_HEIGHT: Field = 16;\nglobal NOTE_HASH_TREE_HEIGHT: Field = 32;\nglobal PUBLIC_DATA_TREE_HEIGHT: Field = 254;\nglobal NULLIFIER_TREE_HEIGHT: Field = 20;\nglobal L1_TO_L2_MSG_TREE_HEIGHT: Field = 16;\nglobal ROLLUP_VK_TREE_HEIGHT: Field = 8;\n\n// SUB-TREES RELATED CONSTANTS\nglobal CONTRACT_SUBTREE_HEIGHT: Field = 1;\nglobal CONTRACT_SUBTREE_SIBLING_PATH_LENGTH: Field = 15;\nglobal NOTE_HASH_SUBTREE_HEIGHT: Field = 7;\nglobal NOTE_HASH_SUBTREE_SIBLING_PATH_LENGTH: Field = 25;\nglobal NULLIFIER_SUBTREE_HEIGHT: Field = 7;\nglobal ARCHIVE_HEIGHT: Field = 16;\nglobal NULLIFIER_SUBTREE_SIBLING_PATH_LENGTH: Field = 13;\nglobal L1_TO_L2_MSG_SUBTREE_HEIGHT: Field = 4;\nglobal L1_TO_L2_MSG_SUBTREE_SIBLING_PATH_LENGTH: Field = 12;\n\n// MISC CONSTANTS\nglobal FUNCTION_SELECTOR_NUM_BYTES: Field = 4;\nglobal MAPPING_SLOT_PEDERSEN_SEPARATOR: Field = 4;\nglobal NUM_FIELDS_PER_SHA256: Field = 2;\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\n\n// NOIR CONSTANTS - constants used only in yarn-packages/noir-contracts\n// Some are defined here because Noir doesn't yet support globals referencing other globals yet.\n// Move these constants to a noir file once the issue bellow is resolved:\n// https://github.com/noir-lang/noir/issues/1734\nglobal L1_TO_L2_MESSAGE_LENGTH: Field = 8;\nglobal L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH: Field = 26;\nglobal MAX_NOTE_FIELDS_LENGTH: Field = 20;\n// GET_NOTE_ORACLE_RETURN_LENGT = MAX_NOTE_FIELDS_LENGTH + 1 + 2\n// The plus 1 is 1 extra field for nonce.\n// + 2 for EXTRA_DATA: [number_of_return_notes, contract_address]\nglobal GET_NOTE_ORACLE_RETURN_LENGTH: Field = 23;\nglobal MAX_NOTES_PER_PAGE: Field = 10;\n// VIEW_NOTE_ORACLE_RETURN_LENGTH = MAX_NOTES_PER_PAGE * (MAX_NOTE_FIELDS_LENGTH + 1) + 2;\nglobal VIEW_NOTE_ORACLE_RETURN_LENGTH: Field = 212;\nglobal CALL_CONTEXT_LENGTH: Field = 7;\nglobal BLOCK_HEADER_LENGTH: Field = 7;\nglobal FUNCTION_DATA_LENGTH: Field = 4;\nglobal CONTRACT_DEPLOYMENT_DATA_LENGTH: Field = 6;\n// Change this ONLY if you have changed the PrivateCircuitPublicInputs structure.\n// In other words, if the structure/size of the public inputs of a function call changes then we\n// should change this constant as well as the offsets in private_call_stack_item.nr\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 155;\nglobal CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH: Field = 3;\nglobal CONTRACT_STORAGE_READ_LENGTH: Field = 2;\n// Change this ONLY if you have changed the PublicCircuitPublicInputs structure.\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 142;\nglobal GET_NOTES_ORACLE_RETURN_LENGTH: Field = 674;\nglobal EMPTY_NULLIFIED_COMMITMENT: Field = 1000000;\nglobal CALL_PRIVATE_FUNCTION_RETURN_SIZE: Field = 161;\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH: Field = 87;\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH: Field = 144;\nglobal COMMITMENTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 4096;\nglobal NULLIFIERS_NUM_BYTES_PER_BASE_ROLLUP: Field = 4096;\nglobal PUBLIC_DATA_WRITES_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal CONTRACTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP_UNPADDED: Field = 104;\nglobal L2_TO_L1_MSGS_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\nglobal LOGS_HASHES_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\n\n/**\n * Enumerate the hash_indices which are used for pedersen hashing.\n * We start from 1 to avoid the default generators. The generator indices are listed\n * based on the number of elements each index hashes. The following conditions must be met:\n *\n * +-----------+-------------------------------+----------------------+\n * | Hash size | Number of elements hashed (n) | Condition to use     |\n * |-----------+-------------------------------+----------------------|\n * | LOW       | n ≤ 8                         | 0 < hash_index ≤ 32  |\n * | MID       | 8 < n ≤ 16                    | 32 < hash_index ≤ 40 |\n * | HIGH      | 16 < n ≤ 48                   | 40 < hash_index ≤ 48 |\n * +-----------+-------------------------------+----------------------+\n *\n * Note: When modifying, modify `GeneratorIndexPacker` in packer.hpp accordingly.\n */\n// Indices with size ≤ 8\nglobal GENERATOR_INDEX__COMMITMENT = 1;\nglobal GENERATOR_INDEX__COMMITMENT_NONCE = 2;\nglobal GENERATOR_INDEX__UNIQUE_COMMITMENT = 3;\nglobal GENERATOR_INDEX__SILOED_COMMITMENT = 4;\nglobal GENERATOR_INDEX__NULLIFIER = 5;\nglobal GENERATOR_INDEX__INITIALIZATION_NULLIFIER = 6;\nglobal GENERATOR_INDEX__OUTER_NULLIFIER = 7;\nglobal GENERATOR_INDEX__PUBLIC_DATA_READ = 8;\nglobal GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST = 9;\nglobal GENERATOR_INDEX__FUNCTION_DATA = 10;\nglobal GENERATOR_INDEX__FUNCTION_LEAF = 11;\nglobal GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA = 12;\nglobal GENERATOR_INDEX__CONSTRUCTOR = 13;\nglobal GENERATOR_INDEX__CONSTRUCTOR_ARGS = 14;\nglobal GENERATOR_INDEX__CONTRACT_ADDRESS = 15;\nglobal GENERATOR_INDEX__CONTRACT_LEAF = 16;\nglobal GENERATOR_INDEX__CALL_CONTEXT = 17;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM = 18;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM_2 = 19;\nglobal GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET = 20;\nglobal GENERATOR_INDEX__L2_TO_L1_MSG = 21;\nglobal GENERATOR_INDEX__TX_CONTEXT = 22;\nglobal GENERATOR_INDEX__PUBLIC_LEAF_INDEX = 23;\nglobal GENERATOR_INDEX__PUBLIC_DATA_LEAF = 24;\nglobal GENERATOR_INDEX__SIGNED_TX_REQUEST = 25;\nglobal GENERATOR_INDEX__GLOBAL_VARIABLES = 26;\nglobal GENERATOR_INDEX__PARTIAL_ADDRESS = 27;\nglobal GENERATOR_INDEX__BLOCK_HASH = 28;\n// Indices with size ≤ 16\nglobal GENERATOR_INDEX__TX_REQUEST = 33;\nglobal GENERATOR_INDEX__SIGNATURE_PAYLOAD = 34;\n// Indices with size ≤ 44\nglobal GENERATOR_INDEX__VK = 41;\nglobal GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS = 42;\nglobal GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS = 43;\nglobal GENERATOR_INDEX__FUNCTION_ARGS = 44;\n",
        "path": "/protocol_types/constants.nr"
      },
      "95": {
        "source": "use dep::protocol_types::constants::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    BLOCK_HEADER_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__BLOCK_HASH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\nuse crate::hash::pedersen_hash;\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_header: BlockHeader,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_header: BlockHeader,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\n// docs:start:block-header\nstruct BlockHeader {\n    note_hash_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    archive_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:block-header\n\nimpl BlockHeader {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; BLOCK_HEADER_LENGTH] {\n        [\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.archive_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn deserialize(deserialized: [Field; BLOCK_HEADER_LENGTH]) -> Self {\n        BlockHeader {\n            note_hash_tree_root: deserialized[0],\n            nullifier_tree_root: deserialized[1],\n            contract_tree_root: deserialized[2],\n            l1_to_l2_messages_tree_root: deserialized[3],\n            archive_root: deserialized[4],\n            public_data_tree_root: deserialized[5],\n            global_variables_hash: deserialized[6],\n        }\n    }\n\n    pub fn empty() -> Self {\n        Self { note_hash_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, archive_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n\n    pub fn block_hash(self) -> Field {\n        // TODO(#3442): Unify the ordering in `BlockHeader::serialize` function and the ordering\n        // in the block hash preimage --> This requires changes in the circuits.\n        let inputs = [\n            self.global_variables_hash,\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.public_data_tree_root\n        ];\n        pedersen_hash(inputs, GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    pending_read_requests: [Field; crate::abi::MAX_PENDING_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_header: BlockHeader,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        pedersen_hash(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_header: BlockHeader,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_header.serialize());\n        inputs.push(self.prover_address);\n\n        pedersen_hash(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n",
        "path": "/aztec/abi.nr"
      },
      "97": {
        "source": "use dep::protocol_types::constants::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    BlockHeader,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n    get_block_header::get_block_header,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n    pending_read_requests: BoundedVec<Field, MAX_PENDING_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_header: BlockHeader,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n            pending_read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_header: inputs.block_header,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_block_header(self, block_number: u32) -> BlockHeader {\n        get_block_header(block_number, self)\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            pending_read_requests: self.pending_read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_header: self.block_header,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_pending_read_request(&mut self, pending_read_request: Field) {\n        self.pending_read_requests.push(pending_read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_header.l1_to_l2_messages_tree_root, self.this_address(), self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                pending_read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 49),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 81),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 97),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 113),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 129),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 133),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 137),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 139),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 141),\n                encrypted_log_preimages_length: fields[143],\n                unencrypted_log_preimages_length: fields[144],\n                block_header: BlockHeader {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    note_hash_tree_root : fields[145],\n                    nullifier_tree_root : fields[146],\n                    contract_tree_root : fields[147],\n                    l1_to_l2_messages_tree_root : fields[148],\n                    archive_root : fields[149],\n                    public_data_tree_root: fields[150],\n                    global_variables_hash: fields[151],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[152], fields[153]),\n                    constructor_vk_hash : fields[154],\n                    function_tree_root : fields[155],\n                    contract_address_salt : fields[156],\n                    portal_contract_address : fields[157],\n                },\n                chain_id: fields[158],\n                version: fields[159],\n            },\n            is_execution_request: fields[160] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_header: BlockHeader::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_header: BlockHeader,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_header: inputs.block_header,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_header: self.inputs.block_header,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_header.l1_to_l2_messages_tree_root, this, self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}\n",
        "path": "/aztec/context.nr"
      },
      "98": {
        "source": "use dep::std::hash::{pedersen_hash_with_separator, sha256};\nuse dep::protocol_types::constants::{\n  GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n  GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (sha256_hashed[15 - i] as Field) * v;\n        low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    let hash_in_a_field = low + high * v;\n\n    hash_in_a_field\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    // TODO(#1205) This is probably not the right index to use\n    pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    pedersen_hash_with_separator(inputs, hash_index)\n}\n",
        "path": "/aztec/hash.nr"
      },
      "110": {
        "source": "use crate::abi::PublicContextInputs;\nuse crate::context::{\n    PrivateContext,\n    PublicContext,\n};\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    utils::compute_inner_note_hash,\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\nuse dep::protocol_types::constants::EMPTY_NULLIFIED_COMMITMENT;\n\npub fn create_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n    broadcast: bool\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    let serialize = note_interface.serialize;\n    let serialized_note = serialize(*note);\n    assert(notify_created_note(storage_slot, serialized_note, inner_note_hash) == 0);\n\n    context.push_new_note_hash(inner_note_hash);\n\n    if broadcast {\n        let broadcast = note_interface.broadcast;\n        broadcast(context, storage_slot, *note);\n    }\n}\n\npub fn create_note_hash_from_public<Note, N>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn destroy_note<Note, N>(context: &mut PrivateContext, note: Note, note_interface: NoteInterface<Note, N>) {\n    let mut nullifier = 0;\n    let mut nullified_commitment: Field = EMPTY_NULLIFIED_COMMITMENT;\n    let compute_nullifier = note_interface.compute_nullifier;\n    nullifier = compute_nullifier(note);\n\n    // We also need the note commitment corresponding to the \"nullifier\"\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    // `nullified_commitment` is used to inform the kernel which pending commitment\n    // the nullifier corresponds to so they can be matched and both squashed/deleted.\n    // nonzero nonce implies \"persistable\" nullifier (nullifies a persistent/in-tree\n    // commitment) in which case `nullified_commitment` is not used since the kernel\n    // just siloes and forwards the nullifier to its output.\n    if (header.is_transient) {\n        // TODO(1718): Can we reuse the note commitment computed in `compute_nullifier`?\n        nullified_commitment = compute_inner_note_hash(note_interface, note);\n    }\n    assert(notify_nullified_note(nullifier, nullified_commitment) == 0);\n\n    context.push_new_nullifier(nullifier, nullified_commitment)\n}\n",
        "path": "/aztec/note/lifecycle.nr"
      },
      "111": {
        "source": "use dep::std::option::Option;\nuse dep::protocol_types::constants::{\n    MAX_READ_REQUESTS_PER_CALL,\n    GET_NOTE_ORACLE_RETURN_LENGTH,\n    GET_NOTES_ORACLE_RETURN_LENGTH,\n    MAX_NOTES_PER_PAGE,\n    VIEW_NOTE_ORACLE_RETURN_LENGTH,\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n};\nuse crate::oracle;\nuse crate::types::vec::BoundedVec;\n\nfn check_note_header<Note, N>(context: PrivateContext, storage_slot: Field, note_interface: NoteInterface<Note, N>, note: Note) {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    let contract_address = context.this_address();\n    assert(header.contract_address == contract_address);\n    assert(header.storage_slot == storage_slot);\n}\n\nfn check_note_fields<N>(fields: [Field; N], selects: BoundedVec<Option<Select>, N>) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        assert(fields[select.field_index] == select.value, \"Mismatch return note field.\");\n    }\n}\n\nfn check_notes_order<N>(fields_0: [Field; N], fields_1: [Field; N], sorts: BoundedVec<Option<Sort>, N>) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let eq = fields_0[sort.field_index] == fields_1[sort.field_index];\n        let lt = fields_0[sort.field_index] as u120 < fields_1[sort.field_index] as u120;\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, N>(context: &mut PrivateContext, storage_slot: Field, note_interface: NoteInterface<Note, N>) -> Note {\n    let note = get_note_internal(storage_slot, note_interface);\n\n    check_note_header(*context, storage_slot, note_interface, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n\n    context.push_read_request(note_hash_for_read_request);\n    note\n}\n\npub fn get_notes<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let opt_notes = get_notes_internal(storage_slot, note_interface, options);\n    let mut num_notes = 0;\n    let mut prev_fields = [0; N];\n    for i in 0..opt_notes.len() {\n        let opt_note = opt_notes[i];\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            let serialize = note_interface.serialize;\n            let fields = serialize(note);\n            check_note_header(*context, storage_slot, note_interface, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_read_request(note_hash_for_read_request);\n\n            num_notes += 1;\n        };\n    }\n    if options.limit != 0 {\n        assert(num_notes <= options.limit, \"Invalid number of return notes.\");\n    }\n    opt_notes\n}\n\nunconstrained fn get_note_internal<Note, N>(storage_slot: Field, note_interface: NoteInterface<Note, N>) -> Note {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(storage_slot,\n        note_interface,\n        0,\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        placeholder_note,\n        placeholder_fields)[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, FILTER_ARGS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let opt_notes = oracle::notes::get_notes(storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields);\n\n    let filter = options.filter;\n    let filter_args = options.filter_args;\n    filter(opt_notes, filter_args)\n}\n\nunconstrained pub fn view_notes<Note, N>(storage_slot: Field, note_interface: NoteInterface<Note, N>, options: NoteViewerOptions<Note, N>) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields)\n}\n\nunconstrained fn flatten_options<Note, N>(selects: BoundedVec<Option<Select>, N>, sorts: BoundedVec<Option<Sort>, N>) -> (u8, [u8; N], [Field; N], [u8; N], [u2; N]) {\n    let mut num_selects = 0;\n    let mut select_by = [0; N];\n    let mut select_values = [0; N];\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by[num_selects] = select.unwrap_unchecked().field_index;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by[i] = sort.unwrap_unchecked().field_index;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (num_selects, select_by, select_values, sort_by, sort_order)\n}\n",
        "path": "/aztec/note/note_getter.nr"
      },
      "113": {
        "source": "use crate::hash::pedersen_hash;\nuse dep::protocol_types::constants::{GENERATOR_INDEX__UNIQUE_COMMITMENT, GENERATOR_INDEX__SILOED_COMMITMENT};\n\npub fn compute_inner_hash(storage_slot: Field, note_hash: Field) -> Field {\n    // TODO(#1205) Do we need a generator index here?\n    pedersen_hash([storage_slot, note_hash], 0)\n}\n\npub fn compute_siloed_hash(contract_address: Field, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address, inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__SILOED_COMMITMENT)\n}\n\npub fn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_COMMITMENT)\n}\n",
        "path": "/aztec/note/note_hash.nr"
      },
      "117": {
        "source": "use dep::protocol_types::constants::GENERATOR_INDEX__OUTER_NULLIFIER;\nuse crate::{\n    note::{\n        note_hash::{compute_inner_hash, compute_siloed_hash, compute_unique_hash},\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n    },\n    utils::arr_copy_slice,\n    hash::pedersen_hash,\n};\n\npub fn compute_inner_note_hash<Note, N>(note_interface: NoteInterface<Note, N>, note: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n\n    compute_inner_hash(header.storage_slot, note_hash)\n}\n\npub fn compute_siloed_note_hash<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let inner_note_hash = compute_inner_note_hash(note_interface, note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\npub fn compute_unique_siloed_note_hash<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let siloed_note_hash = compute_siloed_note_hash(note_interface, note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\npub fn compute_siloed_nullifier<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note_with_header);\n\n    let input = [header.contract_address, inner_nullifier];\n    pedersen_hash(input, GENERATOR_INDEX__OUTER_NULLIFIER)\n}\n\npub fn compute_note_hash_for_read_or_nullify<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n    if (header.is_transient) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note_interface, note_with_header)\n    } else if (header.nonce == 0) {\n        // If not transient and nonce is zero, that means we are reading a public note.\n        compute_siloed_note_hash(note_interface, note_with_header)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note_interface, note_with_header)\n    }\n}\n\npub fn compute_note_hash_and_nullifier<Note, N, S>(note_interface: NoteInterface<Note, N>, note_header: NoteHeader, serialized_note: [Field; S]) -> [Field; 4] {\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    let mut note = deserialize(arr_copy_slice(serialized_note, [0; N], 0));\n    set_header(&mut note, note_header);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n    let inner_note_hash = compute_inner_hash(note_header.storage_slot, note_hash);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note);\n\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n}\n",
        "path": "/aztec/note/utils.nr"
      },
      "119": {
        "source": "#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n",
        "path": "/aztec/oracle/arguments.nr"
      },
      "132": {
        "source": "use dep::protocol_types::constants::RETURN_VALUES_LENGTH;\n\n#[oracle(callPublicFunction)]\nfn call_public_function_oracle(_contract_address: Field, _function_selector: Field, _args_hash: Field) -> [Field; RETURN_VALUES_LENGTH] {}\n\nunconstrained pub fn call_public_function_internal(contract_address: Field, function_selector: Field, args_hash: Field) -> [Field; RETURN_VALUES_LENGTH] {\n    call_public_function_oracle(contract_address, function_selector, args_hash)\n}\n",
        "path": "/aztec/oracle/public_call.nr"
      },
      "133": {
        "source": "use dep::std::option::Option;\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\n#[oracle(notifyCreatedNote)]\nfn notify_created_note_oracle<N>(_storage_slot: Field, _serialized_note: [Field; N], _inner_note_hash: Field) -> Field {}\n\nunconstrained pub fn notify_created_note<N>(storage_slot: Field, serialized_note: [Field; N], inner_note_hash: Field) -> Field {\n    notify_created_note_oracle(storage_slot, serialized_note, inner_note_hash)\n}\n\n#[oracle(notifyNullifiedNote)]\nfn notify_nullified_note_oracle<N>(_nullifier: Field, _inner_note_hash: Field) -> Field {}\n\nunconstrained pub fn notify_nullified_note<N>(nullifier: Field, inner_note_hash: Field) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash)\n}\n\n#[oracle(getNotes)]\nfn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by: [u8; N],\n    _select_values: [Field; N],\n    _sort_by: [u8; N],\n    _sort_order: [u2; N],\n    _limit: u32,\n    _offset: u32,\n    _return_size: u32,\n    _placeholder_fields: [Field; S]\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; N],\n    select_values: [Field; N],\n    sort_by: [u8; N],\n    sort_order: [u2; N],\n    limit: u32,\n    offset: u32,\n    mut placeholder_fields: [Field; S]\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        limit,\n        offset,\n        return_size,\n        placeholder_fields)\n}\n\nunconstrained pub fn get_notes<Note, N, M, S, NS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    num_selects: u8,\n    select_by: [u8; M],\n    select_values: [Field; M],\n    sort_by: [u8; M],\n    sort_order: [u2; M],\n    limit: u32,\n    offset: u32,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS] // TODO: Remove it and use `limit` to initialize the note array.\n) -> [Option<Note>; S] {\n    let fields = get_notes_oracle_wrapper(storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        limit,\n        offset,\n        placeholder_fields);\n    let num_notes = fields[0] as u32;\n    let contract_address = fields[1];\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    for i in 0..placeholder_opt_notes.len() {\n        if i as u32 < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: Field = 2; // num_notes & contract_address.\n            let extra_preimage_length: Field = 2; // nonce & is_transient.\n            let read_offset: Field = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let is_transient = fields[read_offset + 1] as bool;\n            let header = NoteHeader { contract_address, nonce, storage_slot, is_transient };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = deserialize(serialized_note);\n            set_header(&mut note, header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n#[oracle(checkNullifierExists)]\nfn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n",
        "path": "/aztec/oracle/notes.nr"
      },
      "134": {
        "source": "#[oracle(storageRead)]\nfn storage_read_oracle<N>(_storage_slot: Field, _number_of_elements: Field) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field) -> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<T, N>(storage_slot: Field, deserialize: fn ([Field; N]) -> T) -> T {\n    let fields = storage_read_oracle_wrapper(storage_slot);\n    deserialize(fields)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(_storage_slot: Field, _values: [Field; N]) -> [Field; N] {}\n\n// TODO: Remove return value.\nunconstrained pub fn storage_write<N>(storage_slot: Field, fields: [Field; N]) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}\n",
        "path": "/aztec/oracle/storage.nr"
      },
      "138": {
        "source": "use crate::utils::field_from_bytes;\n\nglobal SELECTOR_SIZE = 4;\n\npub fn compute_selector<N>(signature: str<N>) -> Field {\n    let bytes = signature.as_bytes();\n    let hash = dep::std::hash::keccak256(bytes, bytes.len() as u32);\n\n    let mut selector_be_bytes = [0; SELECTOR_SIZE];\n    for i in 0..SELECTOR_SIZE {\n        selector_be_bytes[i] = hash[i];\n    }\n\n    field_from_bytes(selector_be_bytes, true)\n}\n",
        "path": "/aztec/selector.nr"
      },
      "141": {
        "source": "use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::std::option::Option;\nuse crate::hash::pedersen_hash;\n\n// docs:start:map\nstruct Map<V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<V> Map<V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Map<V> {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map {\n            context,\n            storage_slot,\n            state_var_constructor,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: Field) -> V {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = pedersen_hash([self.storage_slot, key],0);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n",
        "path": "/aztec/state_vars/map.nr"
      },
      "142": {
        "source": "use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse crate::types::type_serialization::TypeSerializationInterface;\nuse dep::std::option::Option;\n\n// docs:start:public_state_struct\nstruct PublicState<T, T_SERIALIZED_LEN> {\n    context: Context,\n    storage_slot: Field,\n    serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n}\n// docs:end:public_state_struct\n\nimpl<T, T_SERIALIZED_LEN> PublicState<T, T_SERIALIZED_LEN> {\n    // docs:start:public_state_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n        serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState {\n            context,\n            storage_slot,\n            serialization_methods,\n        }\n    }\n    // docs:end:public_state_struct_new\n\n    // docs:start:public_state_struct_read\n    pub fn read(self) -> T {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        storage_read(self.storage_slot, self.serialization_methods.deserialize)\n    }\n    // docs:end:public_state_struct_read\n\n    // docs:start:public_state_struct_write\n    pub fn write(self, value: T) {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let serialize = self.serialization_methods.serialize;\n        let fields = serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_state_struct_write\n}\n",
        "path": "/aztec/state_vars/public_state.nr"
      },
      "144": {
        "source": "use dep::std::option::Option;\nuse dep::protocol_types::constants::{EMPTY_NULLIFIED_COMMITMENT, GENERATOR_INDEX__INITIALIZATION_NULLIFIER};\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, destroy_note},\n    note_getter::{get_note, view_notes},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n};\nuse crate::oracle::{\n    get_secret_key::get_secret_key,\n    notes::check_nullifier_exists,\n};\nuse crate::hash::pedersen_hash;\n\npub fn compute_singleton_initialization_nullifier(storage_slot: Field, owner: Option<Field>) -> Field {\n    if owner.is_some() {\n        let secret = get_secret_key(owner.unwrap_unchecked());\n        pedersen_hash([storage_slot, secret.low, secret.high],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER)\n    } else {\n        pedersen_hash([storage_slot], GENERATOR_INDEX__INITIALIZATION_NULLIFIER)\n    }\n}\n\n// docs:start:struct\nstruct Singleton<Note, N> {\n    context: Option<&mut PrivateContext>,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    compute_initialization_nullifier: fn (Field, Option<Field>) -> Field,\n}\n// docs:end:struct\n\nimpl<Note, N> Singleton<Note, N> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Singleton {\n            context: context.private,\n            storage_slot,\n            note_interface,\n            compute_initialization_nullifier: compute_singleton_initialization_nullifier,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self, owner: Option<Field>) -> bool {\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // docs:start:initialize\n    pub fn initialize(\n        self,\n        note: &mut Note,\n        owner: Option<Field>,\n        broadcast: bool,\n    ) {\n        let context = self.context.unwrap();\n\n        // Nullify the storage slot.\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        context.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT);\n\n        create_note(context, self.storage_slot, note, self.note_interface, broadcast);\n    }\n    // docs:end:initialize\n\n    // docs:start:replace\n    pub fn replace(\n        self,\n        new_note: &mut Note,\n        broadcast: bool,\n    ) {\n        let context = self.context.unwrap();\n        let prev_note = get_note(context, self.storage_slot, self.note_interface);\n\n        // Nullify previous note.\n        destroy_note(context, prev_note, self.note_interface);\n\n        // Add replacement note.\n        create_note(context, self.storage_slot, new_note, self.note_interface, broadcast);\n    }\n    // docs:end:replace\n\n    // docs:start:get_note\n    pub fn get_note(self, broadcast: bool) -> Note {\n        let context = self.context.unwrap();\n        let mut note = get_note(context, self.storage_slot, self.note_interface);\n\n        // Nullify current note to make sure it's reading the latest note.\n        destroy_note(context, note, self.note_interface);\n\n        // Add the same note again.\n        // Because a nonce is added to every note in the kernel, its nullifier will be different.\n        create_note(context, self.storage_slot, &mut note, self.note_interface, broadcast);\n\n        note\n    }\n    // docs:end:get_note\n\n    // docs:start:view_note\n    unconstrained pub fn view_note(self) -> Note {\n        let options = NoteViewerOptions::new().set_limit(1);\n        view_notes(self.storage_slot, self.note_interface, options)[0].unwrap()\n    }\n    // docs:end:view_note\n}\n",
        "path": "/aztec/state_vars/singleton.nr"
      },
      "146": {
        "source": "struct AztecAddress {\n  address: Field\n}\n\nimpl AztecAddress {\n  pub fn new(address: Field) -> Self {\n    Self {\n      address\n    }\n  }\n\n  pub fn eq(self: Self, other: Self) -> bool {\n    self.address == other.address\n  }\n\n  pub fn serialize(self: Self) -> [Field; 1] {\n    [self.address]\n  }\n\n  pub fn deserialize(fields: [Field; 1]) -> Self {\n    Self {\n      address: fields[0]\n    }\n  }\n}\n\nstruct EthereumAddress {\n  address: Field\n}\n\nimpl EthereumAddress {\n  pub fn new(address: Field) -> Self {\n    // Check that it actually will fit. Spending a lot of constraints here :grimacing:\n    let bytes = address.to_be_bytes(32);\n    for i in 0..12 {\n        assert(bytes[i] == 0, \"Value too large for an ethereum address\");\n    }\n    Self {\n      address\n    }\n  }\n\n\n  pub fn serialize(self: Self) -> [Field; 1] {\n    [self.address]\n  }\n\n  pub fn deserialize(fields: [Field; 1]) -> Self {\n    Self {\n      address: fields[0]\n    }\n  }\n}\n",
        "path": "/aztec/types/address.nr"
      },
      "148": {
        "source": "struct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\n#[test]\nfn test_vec_push_pop() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    assert(vec.len == 0);\n    vec.push(2);\n    assert(vec.len == 1);\n    vec.push(4);\n    assert(vec.len == 2);\n    vec.push(6);\n    assert(vec.len == 3);\n    let x = vec.pop();\n    assert(x == 6);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test]\nfn test_vec_push_array() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test(should_fail)]\nfn test_vec_get_out_of_bound() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    let _x = vec.get(2);\n}\n\n#[test(should_fail)]\nfn test_vec_get_not_declared() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2]);\n    let _x = vec.get(1);\n}\n\n#[test(should_fail)]\nfn test_vec_get_uninitialized() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    let _x = vec.get(0);\n}\n\n#[test(should_fail)]\nfn test_vec_push_overflow() {\n    let mut vec: BoundedVec<Field, 1> = BoundedVec::new(0);\n    vec.push(1);\n    vec.push(2);\n}\n\n#[test]\nfn test_vec_any() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4, 6]);\n    assert(vec.any(|v| v == 2) == true);\n    assert(vec.any(|v| v == 4) == true);\n    assert(vec.any(|v| v == 6) == true);\n    assert(vec.any(|v| v == 3) == false);\n}\n\n#[test]\nfn test_vec_any_not_default() {\n    let default_value = 1;\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(default_value);\n    vec.push_array([2, 4]);\n    assert(vec.any(|v| v == default_value) == false);\n}\n",
        "path": "/aztec/types/vec.nr"
      },
      "153": {
        "source": "use crate::types::type_serialization::TypeSerializationInterface;\nuse crate::types::address::AztecAddress;\n\nglobal AZTEC_ADDRESS_SERIALIZED_LEN: Field = 1;\n\nfn deserialize(fields: [Field; AZTEC_ADDRESS_SERIALIZED_LEN]) -> AztecAddress {\n    AztecAddress::new(fields[0])\n}\n\nfn serialize(value: AztecAddress) -> [Field; AZTEC_ADDRESS_SERIALIZED_LEN] {\n    [value.address]\n}\n\nglobal AztecAddressSerializationMethods = TypeSerializationInterface {\n    deserialize,\n    serialize,\n};\n",
        "path": "/aztec/types/type_serialization/aztec_address_serialization.nr"
      },
      "154": {
        "source": "pub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: Field) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n\npub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() as u32 < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// TODO(#3470): Copied over from https://github.com/AztecProtocol/aztec-packages/blob/a07c4bd47313be6aa604a63f37857eb0136b41ba/yarn-project/noir-protocol-circuits/src/crates/rollup-lib/src/base/base_rollup_inputs.nr#L599\n// move to a shared place?\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    dep::std::eddsa::lt_bytes32(lhs, rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    dep::std::eddsa::lt_bytes32(rhs, lhs)\n}",
        "path": "/aztec/utils.nr"
      },
      "165": {
        "source": "use dep::aztec::{\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n        utils::compute_note_hash_for_read_or_nullify,\n    },\n    hash::pedersen_hash,\n    context::PrivateContext,\n    log::emit_encrypted_log,\n};\nuse dep::aztec::oracle::{\n    get_secret_key::get_secret_key,\n    get_public_key::get_public_key,\n};\n\nglobal MAX_BLACKLIST_LEN: Field = 10;\n// TODO: No hardcode\nglobal BLACKLIST_NOTE_LEN: Field = 11;\n\nstruct BlacklistNote {\n    count: u32,\n    // TODO: Change to indexed merkle root\n    shield_ids: [u32; MAX_BLACKLIST_LEN],\n    // TODO: Do I need an owner?\n    // owner: AztecAddress,\n    // the note header (contract_address, nonce, storage_slot)\n    // included in the note such that it becomes part of encrypted logs for later use.\n    header: NoteHeader,\n}\n\nimpl BlacklistNote{\n    pub fn new(count: u32, shield_ids: [u32; MAX_BLACKLIST_LEN]) -> Self {\n        Self {\n            count,\n            shield_ids,\n            header: NoteHeader::empty(),\n        }\n    }\n\n    pub fn empty() -> Self {\n        Self {\n            count: 0,\n            shield_ids: [0; MAX_BLACKLIST_LEN],\n            header: NoteHeader::empty(),\n        }\n    }\n\n    pub fn serialize(self) -> [Field; BLACKLIST_NOTE_LEN] {\n        let mut serialized_note = [0 as Field; BLACKLIST_NOTE_LEN];\n        serialized_note[0] = self.count as Field;\n        for i in 0..MAX_BLACKLIST_LEN {\n            serialized_note[i + 1] = self.shield_ids[i] as Field;\n        }\n        serialized_note\n    }\n\n    pub fn deserialize(serialized_note: [Field; BLACKLIST_NOTE_LEN]) -> Self {\n        Self {\n            count: serialized_note[0] as u32,\n            // TODO\n            shield_ids: [0; MAX_BLACKLIST_LEN],\n            header: NoteHeader::empty(),\n        }\n    }\n\n    pub fn compute_note_hash(self) -> Field {\n        // TODO(#1205) Should use a non-zero generator index.\n        let serialized_note = self.serialize();\n        pedersen_hash(serialized_note, 0)\n    }\n\n    pub fn compute_nullifier(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_read_or_nullify(BlacklistNoteMethods, self);\n        // let secret = get_secret_key(self.owner.address);\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash([\n            note_hash_for_nullify,\n            // secret.low,\n            // secret.high,\n        ],0)\n    }\n\n    pub fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    // Broadcasts the note as an encrypted log on L1.\n    pub fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n      // We only bother inserting the note if non-empty to save funds on gas.\n      // TODO: Do I need a secret log?\n      // if self.count > 0 {\n      //     let encryption_pub_key = get_public_key(self.owner.address);\n      //     emit_encrypted_log(\n      //         context,\n      //         (*context).this_address(),\n      //         slot,\n      //         encryption_pub_key,\n      //         self.serialize(),\n      //     );\n      // }\n    }\n}\n\nfn deserialize(serialized_note: [Field; BLACKLIST_NOTE_LEN]) -> BlacklistNote {\n    BlacklistNote::deserialize(serialized_note)\n}\n\nfn serialize(note: BlacklistNote) -> [Field; BLACKLIST_NOTE_LEN] {\n    note.serialize()\n}\n\nfn compute_note_hash(note: BlacklistNote) -> Field {\n    note.compute_note_hash()\n}\n\nfn compute_nullifier(note: BlacklistNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: BlacklistNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut BlacklistNote, header: NoteHeader) {\n    note.set_header(header)\n}\n\n// Broadcasts the note as an encrypted log on L1.\nfn broadcast(context: &mut PrivateContext, slot: Field, note: BlacklistNote) {\n    note.broadcast(context, slot);\n}\n\nglobal BlacklistNoteMethods = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n    broadcast,\n};\n\n",
        "path": "/Users/ayush/projects/aztec-ws/aztec-token-partition-table/src/contracts/attestor/src/types/blacklist_note.nr"
      },
      "166": {
        "source": "\nglobal MAX_SHIELD_IDS_LEN: Field = 10;\n\n// TODO: Use merkle tree intersection/non-intersection check\npub fn contains<N>(\n    arr: [u32; N],\n    addr: u32\n) -> bool {\n    let mut res = false;\n    for i in 0..arr.len() {\n        if arr[i] == addr {\n            res = true;\n        }\n    }\n    res\n}",
        "path": "/Users/ayush/projects/aztec-ws/aztec-token-partition-table/src/contracts/attestor/src/utils.nr"
      }
    }
  }
}