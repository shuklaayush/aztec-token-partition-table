
/* Autogenerated file, do not edit! */

/* eslint-disable */
import {
  AztecAddress,
  AztecAddressLike,
  CompleteAddress,
  Contract,
  ContractArtifact,
  ContractBase,
  ContractFunctionInteraction,
  ContractInstanceWithAddress,
  ContractMethod,
  DeployMethod,
  EthAddress,
  EthAddressLike,
  FieldLike,
  Fr,
  FunctionSelectorLike,
  loadContractArtifact,
  NoirCompiledContract,
  Point,
  PublicKey,
  Wallet,
  WrappedFieldLike,
} from '@aztec/aztec.js';
import AttestorContractArtifactJson from '../contracts/target/attestor-Attestor.json' assert { type: 'json' };
export const AttestorContractArtifact = loadContractArtifact(AttestorContractArtifactJson as NoirCompiledContract);

/**
 * Type-safe interface for contract Attestor;
 */
export class AttestorContract extends ContractBase {
  
  private constructor(
    instance: ContractInstanceWithAddress,
    wallet: Wallet,
  ) {
    super(instance, AttestorContractArtifact, wallet);
  }
  

  
  /**
   * Creates a contract instance.
   * @param address - The deployed contract's address.
   * @param wallet - The wallet to use when interacting with the contract.
   * @returns A promise that resolves to a new Contract instance.
   */
  public static async at(
    address: AztecAddress,
    wallet: Wallet,
  ) {
    return Contract.at(address, AttestorContract.artifact, wallet) as Promise<AttestorContract>;
  }

  
  /**
   * Creates a tx to deploy a new instance of this contract.
   */
  public static deploy(wallet: Wallet, admin: AztecAddressLike) {
    return new DeployMethod<AttestorContract>(Point.ZERO, wallet, AttestorContractArtifact, AttestorContract.at, Array.from(arguments).slice(1));
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
   */
  public static deployWithPublicKey(publicKey: PublicKey, wallet: Wallet, admin: AztecAddressLike) {
    return new DeployMethod<AttestorContract>(publicKey, wallet, AttestorContractArtifact, AttestorContract.at, Array.from(arguments).slice(2));
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified constructor method.
   */
  public static deployWithOpts<M extends keyof AttestorContract['methods']>(
    opts: { publicKey?: PublicKey; method?: M; wallet: Wallet },
    ...args: Parameters<AttestorContract['methods'][M]>
  ) {
    return new DeployMethod<AttestorContract>(
      opts.publicKey ?? Point.ZERO,
      opts.wallet,
      AttestorContractArtifact,
      AttestorContract.at,
      Array.from(arguments).slice(1),
      opts.method ?? 'constructor',
    );
  }
  

  
  /**
   * Returns this contract's artifact.
   */
  public static get artifact(): ContractArtifact {
    return AttestorContractArtifact;
  }
  

  /** Type-safe wrappers for the public methods exposed by the contract. */
  public methods!: {
    
    /** constructor(admin: struct) */
    constructor: ((admin: AztecAddressLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** is_not_blacklisted(token: struct, shield_id: field, proof: array) */
    is_not_blacklisted: ((token: AztecAddressLike, shield_id: FieldLike, proof: FieldLike[]) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** add_to_blacklist(token: struct, shield_id: field, proof: array) */
    add_to_blacklist: ((token: AztecAddressLike, shield_id: FieldLike, proof: FieldLike[]) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** compute_note_hash_and_nullifier(contract_address: struct, nonce: field, storage_slot: field, note_type_id: field, serialized_note: array) */
    compute_note_hash_and_nullifier: ((contract_address: AztecAddressLike, nonce: FieldLike, storage_slot: FieldLike, note_type_id: FieldLike, serialized_note: FieldLike[]) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** remove_from_blacklist(token: struct, shield_id: field, proof: array) */
    remove_from_blacklist: ((token: AztecAddressLike, shield_id: FieldLike, proof: FieldLike[]) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** admin() */
    admin: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** get_blacklist_root(token: struct) */
    get_blacklist_root: ((token: AztecAddressLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** request_attestation(partition_table: struct, blacklist_root: field, proofs: array) */
    request_attestation: ((partition_table: { shield_ids: { len: (bigint | number), elems: FieldLike[] }, attestations: { len: (bigint | number), elems: FieldLike[] }, max_block_number: (bigint | number), is_table_cleared: boolean }, blacklist_root: FieldLike, proofs: FieldLike[]) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
  };
}
